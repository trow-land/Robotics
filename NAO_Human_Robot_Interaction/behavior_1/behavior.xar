<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="59.4604">
            <Box name="Initial_Dialogue" id="53" localization="8" tooltip="Enter description here" x="408" y="393">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Text Edit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="EndOfIntro" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="59.4604">
                      <Box name="Say Text (2)" id="14" localization="8" tooltip="Say the text received on its input." x="2205" y="2015">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say Text (3)" id="17" localization="8" tooltip="Say the text received on its input." x="2238" y="2210">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="kneel" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="419" y="1024">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="288">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="76" value="-7.11464" />
                              <Key frame="88" value="5.08809" />
                              <Key frame="101" value="5.09532" />
                              <Key frame="113" value="4.44932" />
                              <Key frame="126" value="2.13598" />
                              <Key frame="138" value="-1.00596" />
                              <Key frame="151" value="-4.39836" />
                              <Key frame="163" value="-7.50914" />
                              <Key frame="176" value="-9.39475" />
                              <Key frame="188" value="-11.5722" />
                              <Key frame="201" value="-18.5579" />
                              <Key frame="213" value="-9.53172" />
                              <Key frame="226" value="-2.22199" />
                              <Key frame="238" value="4.41186" />
                              <Key frame="251" value="5.72958" />
                              <Key frame="263" value="5.72958" />
                              <Key frame="276" value="5.72958" />
                              <Key frame="288" value="5.72958" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="76" value="-0.0937564" />
                              <Key frame="88" value="-0.529491" />
                              <Key frame="101" value="-0.529749" />
                              <Key frame="113" value="-0.506682" />
                              <Key frame="126" value="-0.424078" />
                              <Key frame="138" value="-0.311885" />
                              <Key frame="151" value="-0.190749" />
                              <Key frame="163" value="-0.0796696" />
                              <Key frame="176" value="-0.0123382" />
                              <Key frame="188" value="0" />
                              <Key frame="201" value="0" />
                              <Key frame="213" value="0" />
                              <Key frame="226" value="0" />
                              <Key frame="238" value="0" />
                              <Key frame="251" value="0" />
                              <Key frame="263" value="0" />
                              <Key frame="276" value="0" />
                              <Key frame="288" value="0" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="76" value="-14.2368" />
                              <Key frame="88" value="-68.0873" />
                              <Key frame="101" value="-68.15" />
                              <Key frame="113" value="-64.9644" />
                              <Key frame="126" value="-53.5566" />
                              <Key frame="138" value="-38.0628" />
                              <Key frame="151" value="-21.3338" />
                              <Key frame="163" value="-5.99367" />
                              <Key frame="176" value="3.30485" />
                              <Key frame="188" value="-0.118421" />
                              <Key frame="201" value="-21.8115" />
                              <Key frame="213" value="-38.2716" />
                              <Key frame="226" value="-51.5918" />
                              <Key frame="238" value="-64.1121" />
                              <Key frame="251" value="-67.609" />
                              <Key frame="263" value="-67.609" />
                              <Key frame="276" value="-67.609" />
                              <Key frame="288" value="-67.609" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="76" value="-3.67201" />
                              <Key frame="88" value="4.29331" />
                              <Key frame="101" value="4.29809" />
                              <Key frame="113" value="3.83451" />
                              <Key frame="126" value="2.17446" />
                              <Key frame="138" value="-0.0802052" />
                              <Key frame="151" value="-2.51461" />
                              <Key frame="163" value="-4.74691" />
                              <Key frame="176" value="-6.10003" />
                              <Key frame="188" value="-5.661" />
                              <Key frame="201" value="-2.50908" />
                              <Key frame="213" value="0.0899381" />
                              <Key frame="226" value="2.19329" />
                              <Key frame="238" value="4.0819" />
                              <Key frame="251" value="4.41178" />
                              <Key frame="263" value="4.41178" />
                              <Key frame="276" value="4.41178" />
                              <Key frame="288" value="4.41178" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="76" value="-57.303" />
                              <Key frame="88" value="-57.303" />
                              <Key frame="101" value="-57.303" />
                              <Key frame="113" value="-56.6054" />
                              <Key frame="126" value="-52.2496" />
                              <Key frame="138" value="-45.2286" />
                              <Key frame="151" value="-37.3938" />
                              <Key frame="163" value="-29.9696" />
                              <Key frame="176" value="-25.1794" />
                              <Key frame="188" value="-25.8395" />
                              <Key frame="201" value="-40.3139" />
                              <Key frame="213" value="-46.7673" />
                              <Key frame="226" value="-53.2078" />
                              <Key frame="238" value="-59.6457" />
                              <Key frame="251" value="-62.0949" />
                              <Key frame="263" value="-62.1224" />
                              <Key frame="276" value="-62.1227" />
                              <Key frame="288" value="-62.1227" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="76" value="-48.1671" />
                              <Key frame="88" value="-48.1671" />
                              <Key frame="101" value="-48.1671" />
                              <Key frame="113" value="-49.1449" />
                              <Key frame="126" value="-53.0667" />
                              <Key frame="138" value="-57.0628" />
                              <Key frame="151" value="-61.4916" />
                              <Key frame="163" value="-65.6461" />
                              <Key frame="176" value="-68.2765" />
                              <Key frame="188" value="-68.1713" />
                              <Key frame="201" value="-62.6236" />
                              <Key frame="213" value="-56.772" />
                              <Key frame="226" value="-51.7568" />
                              <Key frame="238" value="-47.7663" />
                              <Key frame="251" value="-46.9077" />
                              <Key frame="263" value="-46.9103" />
                              <Key frame="276" value="-46.9104" />
                              <Key frame="288" value="-46.9104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="76" value="0.257831" />
                              <Key frame="88" value="0.0109499" />
                              <Key frame="101" value="0.0108" />
                              <Key frame="113" value="0.0247596" />
                              <Key frame="126" value="0.0684883" />
                              <Key frame="138" value="0.129736" />
                              <Key frame="151" value="0.198784" />
                              <Key frame="163" value="0.256507" />
                              <Key frame="176" value="0.293264" />
                              <Key frame="188" value="0.285345" />
                              <Key frame="201" value="0.206974" />
                              <Key frame="213" value="0.100947" />
                              <Key frame="226" value="0.0317875" />
                              <Key frame="238" value="0.00283994" />
                              <Key frame="251" value="0" />
                              <Key frame="263" value="0" />
                              <Key frame="276" value="0" />
                              <Key frame="288" value="0" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="76" value="-3.1398" />
                              <Key frame="88" value="-43.4376" />
                              <Key frame="101" value="-43.5919" />
                              <Key frame="113" value="-41.1353" />
                              <Key frame="126" value="-33.4401" />
                              <Key frame="138" value="-22.6619" />
                              <Key frame="151" value="-10.5111" />
                              <Key frame="163" value="-0.353206" />
                              <Key frame="176" value="6.11525" />
                              <Key frame="188" value="4.7184" />
                              <Key frame="201" value="-7.63749" />
                              <Key frame="213" value="-19.4263" />
                              <Key frame="226" value="-28.9673" />
                              <Key frame="238" value="-37.8412" />
                              <Key frame="251" value="-40.107" />
                              <Key frame="263" value="-40.107" />
                              <Key frame="276" value="-40.107" />
                              <Key frame="288" value="-40.107" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="76" value="3.62397" />
                              <Key frame="88" value="-4.72384" />
                              <Key frame="101" value="-4.74374" />
                              <Key frame="113" value="-4.1017" />
                              <Key frame="126" value="-2.2666" />
                              <Key frame="138" value="0.0655102" />
                              <Key frame="151" value="2.80647" />
                              <Key frame="163" value="5.09788" />
                              <Key frame="176" value="6.59545" />
                              <Key frame="188" value="6.06242" />
                              <Key frame="201" value="2.61343" />
                              <Key frame="213" value="-0.214957" />
                              <Key frame="226" value="-2.2641" />
                              <Key frame="238" value="-4.22886" />
                              <Key frame="251" value="-4.58366" />
                              <Key frame="263" value="-4.58366" />
                              <Key frame="276" value="-4.58366" />
                              <Key frame="288" value="-4.58366" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="76" value="-10.2517" />
                              <Key frame="88" value="-14.84" />
                              <Key frame="101" value="-14.8513" />
                              <Key frame="113" value="-14.6046" />
                              <Key frame="126" value="-13.7877" />
                              <Key frame="138" value="-12.7496" />
                              <Key frame="151" value="-11.5294" />
                              <Key frame="163" value="-10.5094" />
                              <Key frame="176" value="-9.84276" />
                              <Key frame="188" value="-9.89031" />
                              <Key frame="201" value="-10.6557" />
                              <Key frame="213" value="-12.1865" />
                              <Key frame="226" value="-13.2958" />
                              <Key frame="238" value="-14.2195" />
                              <Key frame="251" value="-14.3239" />
                              <Key frame="263" value="-14.3239" />
                              <Key frame="276" value="-14.3239" />
                              <Key frame="288" value="-14.3239" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="76" value="29.3352" />
                              <Key frame="88" value="120.38" />
                              <Key frame="101" value="121.04" />
                              <Key frame="113" value="114.942" />
                              <Key frame="126" value="94.7485" />
                              <Key frame="138" value="69.0856" />
                              <Key frame="151" value="38.9239" />
                              <Key frame="163" value="12.7386" />
                              <Key frame="176" value="-2.77051" />
                              <Key frame="188" value="7.02636" />
                              <Key frame="201" value="40.5672" />
                              <Key frame="213" value="70.3805" />
                              <Key frame="226" value="92.1878" />
                              <Key frame="238" value="114.194" />
                              <Key frame="251" value="120.894" />
                              <Key frame="263" value="120.894" />
                              <Key frame="276" value="120.894" />
                              <Key frame="288" value="120.894" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="76" value="79.8912" />
                              <Key frame="88" value="79.9791" />
                              <Key frame="101" value="79.8912" />
                              <Key frame="113" value="79.0235" />
                              <Key frame="126" value="77.3106" />
                              <Key frame="138" value="78.4251" />
                              <Key frame="151" value="79.8678" />
                              <Key frame="163" value="81.2559" />
                              <Key frame="176" value="82.2457" />
                              <Key frame="188" value="82.8936" />
                              <Key frame="201" value="83.0038" />
                              <Key frame="213" value="82.5144" />
                              <Key frame="226" value="81.2254" />
                              <Key frame="238" value="78.644" />
                              <Key frame="251" value="76.9735" />
                              <Key frame="263" value="76.9274" />
                              <Key frame="276" value="76.9268" />
                              <Key frame="288" value="76.9268" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="76" value="4.91954" />
                              <Key frame="88" value="4.91954" />
                              <Key frame="101" value="4.91954" />
                              <Key frame="113" value="5.17464" />
                              <Key frame="126" value="8.10165" />
                              <Key frame="138" value="9.18291" />
                              <Key frame="151" value="10.3959" />
                              <Key frame="163" value="11.6432" />
                              <Key frame="176" value="12.5201" />
                              <Key frame="188" value="13.2886" />
                              <Key frame="201" value="14.2849" />
                              <Key frame="213" value="14.0298" />
                              <Key frame="226" value="13.6462" />
                              <Key frame="238" value="12.8093" />
                              <Key frame="251" value="11.3151" />
                              <Key frame="263" value="11.2482" />
                              <Key frame="276" value="11.2474" />
                              <Key frame="288" value="11.2474" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="76" value="7.64417" />
                              <Key frame="88" value="7.64417" />
                              <Key frame="101" value="7.64417" />
                              <Key frame="113" value="7.57144" />
                              <Key frame="126" value="7.28503" />
                              <Key frame="138" value="6.88545" />
                              <Key frame="151" value="6.44794" />
                              <Key frame="163" value="6.0408" />
                              <Key frame="176" value="5.78629" />
                              <Key frame="188" value="5.8947" />
                              <Key frame="201" value="6.6563" />
                              <Key frame="213" value="7.54647" />
                              <Key frame="226" value="8.23194" />
                              <Key frame="238" value="8.54469" />
                              <Key frame="251" value="8.59431" />
                              <Key frame="263" value="8.59437" />
                              <Key frame="276" value="8.59437" />
                              <Key frame="288" value="8.59437" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="76" value="-14.0985" />
                              <Key frame="88" value="-67.7192" />
                              <Key frame="101" value="-67.97" />
                              <Key frame="113" value="-64.4473" />
                              <Key frame="126" value="-52.7818" />
                              <Key frame="138" value="-37.2009" />
                              <Key frame="151" value="-20.5329" />
                              <Key frame="163" value="-5.40609" />
                              <Key frame="176" value="3.55329" />
                              <Key frame="188" value="-2.94106" />
                              <Key frame="201" value="-23.226" />
                              <Key frame="213" value="-39.0751" />
                              <Key frame="226" value="-51.5535" />
                              <Key frame="238" value="-64.1024" />
                              <Key frame="251" value="-67.609" />
                              <Key frame="263" value="-67.609" />
                              <Key frame="276" value="-67.609" />
                              <Key frame="288" value="-67.609" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="76" value="4.40653" />
                              <Key frame="88" value="-4.2826" />
                              <Key frame="101" value="-4.30429" />
                              <Key frame="113" value="-3.73748" />
                              <Key frame="126" value="-2.08741" />
                              <Key frame="138" value="0.18679" />
                              <Key frame="151" value="2.61967" />
                              <Key frame="163" value="4.82758" />
                              <Key frame="176" value="6.1353" />
                              <Key frame="188" value="4.50915" />
                              <Key frame="201" value="1.09258" />
                              <Key frame="213" value="-0.995171" />
                              <Key frame="226" value="-2.63867" />
                              <Key frame="238" value="-4.18095" />
                              <Key frame="251" value="-4.41178" />
                              <Key frame="263" value="-4.41178" />
                              <Key frame="276" value="-4.41178" />
                              <Key frame="288" value="-4.41178" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="76" value="56.6047" />
                              <Key frame="88" value="56.6047" />
                              <Key frame="101" value="56.6047" />
                              <Key frame="113" value="55.8161" />
                              <Key frame="126" value="51.447" />
                              <Key frame="138" value="44.4862" />
                              <Key frame="151" value="36.7908" />
                              <Key frame="163" value="29.5762" />
                              <Key frame="176" value="25.0166" />
                              <Key frame="188" value="27.1084" />
                              <Key frame="201" value="37.7061" />
                              <Key frame="213" value="45.1529" />
                              <Key frame="226" value="52.1369" />
                              <Key frame="238" value="59.2118" />
                              <Key frame="251" value="62.0934" />
                              <Key frame="263" value="62.1225" />
                              <Key frame="276" value="62.1227" />
                              <Key frame="288" value="62.1227" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="76" value="48.338" />
                              <Key frame="88" value="48.4259" />
                              <Key frame="101" value="48.5138" />
                              <Key frame="113" value="49.7709" />
                              <Key frame="126" value="53.5637" />
                              <Key frame="138" value="57.5052" />
                              <Key frame="151" value="61.8385" />
                              <Key frame="163" value="65.8627" />
                              <Key frame="176" value="68.3607" />
                              <Key frame="188" value="68.313" />
                              <Key frame="201" value="65.408" />
                              <Key frame="213" value="58.2805" />
                              <Key frame="226" value="52.7653" />
                              <Key frame="238" value="48.1355" />
                              <Key frame="251" value="46.9087" />
                              <Key frame="263" value="46.9104" />
                              <Key frame="276" value="46.9104" />
                              <Key frame="288" value="46.9104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="76" value="0.29085" />
                              <Key frame="88" value="0.0195075" />
                              <Key frame="101" value="0.018" />
                              <Key frame="113" value="0.0330055" />
                              <Key frame="126" value="0.0766893" />
                              <Key frame="138" value="0.136896" />
                              <Key frame="151" value="0.201304" />
                              <Key frame="163" value="0.259756" />
                              <Key frame="176" value="0.294376" />
                              <Key frame="188" value="0.283164" />
                              <Key frame="201" value="0.218475" />
                              <Key frame="213" value="0.104496" />
                              <Key frame="226" value="0.0362716" />
                              <Key frame="238" value="0.00324112" />
                              <Key frame="251" value="0" />
                              <Key frame="263" value="0" />
                              <Key frame="276" value="0" />
                              <Key frame="288" value="0" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="76" value="-2.57055" />
                              <Key frame="88" value="-43.3455" />
                              <Key frame="101" value="-43.6846" />
                              <Key frame="113" value="-40.9716" />
                              <Key frame="126" value="-33.0737" />
                              <Key frame="138" value="-22.1884" />
                              <Key frame="151" value="-10.5436" />
                              <Key frame="163" value="0.0244521" />
                              <Key frame="176" value="6.28375" />
                              <Key frame="188" value="2.2238" />
                              <Key frame="201" value="-9.32175" />
                              <Key frame="213" value="-20.6843" />
                              <Key frame="226" value="-29.1287" />
                              <Key frame="238" value="-37.8818" />
                              <Key frame="251" value="-40.107" />
                              <Key frame="263" value="-40.107" />
                              <Key frame="276" value="-40.107" />
                              <Key frame="288" value="-40.107" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="76" value="-4.68363" />
                              <Key frame="88" value="4.86882" />
                              <Key frame="101" value="4.92435" />
                              <Key frame="113" value="4.21598" />
                              <Key frame="126" value="2.40968" />
                              <Key frame="138" value="-0.0798279" />
                              <Key frame="151" value="-2.74304" />
                              <Key frame="163" value="-5.15999" />
                              <Key frame="176" value="-6.59151" />
                              <Key frame="188" value="-4.79799" />
                              <Key frame="201" value="-1.05496" />
                              <Key frame="213" value="1.12651" />
                              <Key frame="226" value="2.74731" />
                              <Key frame="238" value="4.39387" />
                              <Key frame="251" value="4.58366" />
                              <Key frame="263" value="4.58366" />
                              <Key frame="276" value="4.58366" />
                              <Key frame="288" value="4.58366" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="76" value="-10.1526" />
                              <Key frame="88" value="-14.826" />
                              <Key frame="101" value="-14.8513" />
                              <Key frame="113" value="-14.5794" />
                              <Key frame="126" value="-13.7877" />
                              <Key frame="138" value="-12.6966" />
                              <Key frame="151" value="-11.5294" />
                              <Key frame="163" value="-10.4702" />
                              <Key frame="176" value="-9.84276" />
                              <Key frame="188" value="-9.96412" />
                              <Key frame="201" value="-10.7682" />
                              <Key frame="213" value="-12.1865" />
                              <Key frame="226" value="-13.2958" />
                              <Key frame="238" value="-14.2426" />
                              <Key frame="251" value="-14.3239" />
                              <Key frame="263" value="-14.3239" />
                              <Key frame="276" value="-14.3239" />
                              <Key frame="288" value="-14.3239" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="76" value="27.4063" />
                              <Key frame="88" value="119.566" />
                              <Key frame="101" value="121.04" />
                              <Key frame="113" value="114.318" />
                              <Key frame="126" value="94.7485" />
                              <Key frame="138" value="67.7771" />
                              <Key frame="151" value="37.6571" />
                              <Key frame="163" value="12.7386" />
                              <Key frame="176" value="-2.77051" />
                              <Key frame="188" value="11.5814" />
                              <Key frame="201" value="43.8992" />
                              <Key frame="213" value="71.6219" />
                              <Key frame="226" value="93.2035" />
                              <Key frame="238" value="115.708" />
                              <Key frame="251" value="120.894" />
                              <Key frame="263" value="120.894" />
                              <Key frame="276" value="120.894" />
                              <Key frame="288" value="120.894" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="76" value="80.5112" />
                              <Key frame="88" value="80.5112" />
                              <Key frame="101" value="80.5112" />
                              <Key frame="113" value="79.3794" />
                              <Key frame="126" value="77.6692" />
                              <Key frame="138" value="78.761" />
                              <Key frame="151" value="80.1103" />
                              <Key frame="163" value="81.3472" />
                              <Key frame="176" value="82.2686" />
                              <Key frame="188" value="82.7369" />
                              <Key frame="201" value="82.1419" />
                              <Key frame="213" value="82.0578" />
                              <Key frame="226" value="81.0474" />
                              <Key frame="238" value="78.4397" />
                              <Key frame="251" value="76.964" />
                              <Key frame="263" value="76.9273" />
                              <Key frame="276" value="76.9268" />
                              <Key frame="288" value="76.9268" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="76" value="-4.92435" />
                              <Key frame="88" value="-4.83644" />
                              <Key frame="101" value="-4.74855" />
                              <Key frame="113" value="-5.06356" />
                              <Key frame="126" value="-8.05472" />
                              <Key frame="138" value="-9.17194" />
                              <Key frame="151" value="-10.4605" />
                              <Key frame="163" value="-11.6537" />
                              <Key frame="176" value="-12.5263" />
                              <Key frame="188" value="-13.1574" />
                              <Key frame="201" value="-13.1555" />
                              <Key frame="213" value="-13.3485" />
                              <Key frame="226" value="-13.3703" />
                              <Key frame="238" value="-12.7495" />
                              <Key frame="251" value="-11.304" />
                              <Key frame="263" value="-11.2481" />
                              <Key frame="276" value="-11.2474" />
                              <Key frame="288" value="-11.2474" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="76" value="-6.85796" />
                              <Key frame="88" value="-6.77007" />
                              <Key frame="101" value="-6.84188" />
                              <Key frame="113" value="-6.3246" />
                              <Key frame="126" value="-4.49681" />
                              <Key frame="138" value="-1.86971" />
                              <Key frame="151" value="1.13447" />
                              <Key frame="163" value="3.68345" />
                              <Key frame="176" value="5.35669" />
                              <Key frame="188" value="5.67208" />
                              <Key frame="201" value="4.37119" />
                              <Key frame="213" value="-1.68739" />
                              <Key frame="226" value="-6.34321" />
                              <Key frame="238" value="-8.33409" />
                              <Key frame="251" value="-8.59414" />
                              <Key frame="263" value="-8.59437" />
                              <Key frame="276" value="-8.59437" />
                              <Key frame="288" value="-8.59437" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Goto Posture" id="3" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="63" y="1146">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="handclosing" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="124" y="1007">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="245">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="14" value="4.79647" />
                              <Key frame="132" value="-0.118421" />
                              <Key frame="146" value="-21.8115" />
                              <Key frame="158" value="-38.2716" />
                              <Key frame="171" value="-51.5918" />
                              <Key frame="183" value="-64.1121" />
                              <Key frame="196" value="-67.609" />
                              <Key frame="245" value="4.79647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="14" value="-6.06988" />
                              <Key frame="132" value="-5.661" />
                              <Key frame="146" value="-2.50908" />
                              <Key frame="158" value="0.0899381" />
                              <Key frame="171" value="2.19329" />
                              <Key frame="183" value="4.0819" />
                              <Key frame="196" value="4.41178" />
                              <Key frame="245" value="-6.06988" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="14" value="-31.4" />
                              <Key frame="130" value="-58.2" />
                              <Key frame="132" value="-58" />
                              <Key frame="146" value="-58" />
                              <Key frame="158" value="-58" />
                              <Key frame="171" value="-58" />
                              <Key frame="183" value="-58" />
                              <Key frame="196" value="-58" />
                              <Key frame="200" value="-58.2" />
                              <Key frame="245" value="-31.4" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="14" value="-51.2" />
                              <Key frame="130" value="-62.2" />
                              <Key frame="132" value="-62" />
                              <Key frame="146" value="-62.2" />
                              <Key frame="158" value="-62.2" />
                              <Key frame="171" value="-62" />
                              <Key frame="183" value="-63" />
                              <Key frame="196" value="-62" />
                              <Key frame="200" value="-62.2" />
                              <Key frame="245" value="-51.2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="14" value="0.31365" />
                              <Key frame="130" value="1" />
                              <Key frame="132" value="1" />
                              <Key frame="146" value="1" />
                              <Key frame="158" value="1" />
                              <Key frame="171" value="1" />
                              <Key frame="183" value="1" />
                              <Key frame="196" value="1" />
                              <Key frame="200" value="1" />
                              <Key frame="245" value="0.31365" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="14" value="7.87539" />
                              <Key frame="132" value="4.7184" />
                              <Key frame="146" value="-7.63749" />
                              <Key frame="158" value="-19.4263" />
                              <Key frame="171" value="-28.9673" />
                              <Key frame="183" value="-37.8412" />
                              <Key frame="196" value="-40.107" />
                              <Key frame="245" value="7.87539" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="14" value="6.40882" />
                              <Key frame="132" value="6.06242" />
                              <Key frame="146" value="2.61343" />
                              <Key frame="158" value="-0.214957" />
                              <Key frame="171" value="-2.2641" />
                              <Key frame="183" value="-4.22886" />
                              <Key frame="196" value="-4.58366" />
                              <Key frame="245" value="6.40882" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="14" value="-9.59239" />
                              <Key frame="132" value="-9.89031" />
                              <Key frame="146" value="-10.6557" />
                              <Key frame="158" value="-12.1865" />
                              <Key frame="171" value="-13.2958" />
                              <Key frame="183" value="-14.2195" />
                              <Key frame="196" value="-14.3239" />
                              <Key frame="245" value="-9.59239" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="14" value="-5.28273" />
                              <Key frame="132" value="7.02636" />
                              <Key frame="146" value="40.5672" />
                              <Key frame="158" value="70.3805" />
                              <Key frame="171" value="92.1878" />
                              <Key frame="183" value="114.194" />
                              <Key frame="196" value="120.894" />
                              <Key frame="245" value="-5.28273" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="14" value="82.9575" />
                              <Key frame="130" value="17.1" />
                              <Key frame="132" value="17" />
                              <Key frame="146" value="17" />
                              <Key frame="158" value="17.1" />
                              <Key frame="171" value="17.1" />
                              <Key frame="183" value="17" />
                              <Key frame="196" value="17" />
                              <Key frame="200" value="17.1" />
                              <Key frame="245" value="82.9575" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="14" value="12.6337" />
                              <Key frame="130" value="-16.9" />
                              <Key frame="132" value="-16" />
                              <Key frame="146" value="-16.9" />
                              <Key frame="158" value="-16" />
                              <Key frame="171" value="-16" />
                              <Key frame="183" value="-16" />
                              <Key frame="196" value="-16" />
                              <Key frame="200" value="-16.9" />
                              <Key frame="245" value="12.6337" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="14" value="6.19916" />
                              <Key frame="130" value="10.9" />
                              <Key frame="132" value="10" />
                              <Key frame="146" value="10.9" />
                              <Key frame="158" value="10" />
                              <Key frame="171" value="10" />
                              <Key frame="183" value="10" />
                              <Key frame="196" value="10" />
                              <Key frame="200" value="10.9" />
                              <Key frame="245" value="6.19916" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="14" value="4.83969" />
                              <Key frame="132" value="-2.94106" />
                              <Key frame="146" value="-23.226" />
                              <Key frame="158" value="-39.0751" />
                              <Key frame="171" value="-51.5535" />
                              <Key frame="183" value="-64.1024" />
                              <Key frame="196" value="-67.609" />
                              <Key frame="245" value="4.83969" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="14" value="6.30309" />
                              <Key frame="132" value="4.50915" />
                              <Key frame="146" value="1.09258" />
                              <Key frame="158" value="-0.995171" />
                              <Key frame="171" value="-2.63867" />
                              <Key frame="183" value="-4.18095" />
                              <Key frame="196" value="-4.41178" />
                              <Key frame="245" value="6.30309" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="14" value="31.4" />
                              <Key frame="130" value="58.2" />
                              <Key frame="132" value="58" />
                              <Key frame="146" value="58" />
                              <Key frame="158" value="58" />
                              <Key frame="171" value="58" />
                              <Key frame="183" value="58" />
                              <Key frame="196" value="58" />
                              <Key frame="200" value="58.2" />
                              <Key frame="245" value="31.4" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="14" value="51.2" />
                              <Key frame="130" value="62.2" />
                              <Key frame="132" value="62" />
                              <Key frame="146" value="62.2" />
                              <Key frame="158" value="62.2" />
                              <Key frame="171" value="62" />
                              <Key frame="183" value="63" />
                              <Key frame="196" value="62" />
                              <Key frame="200" value="62.2" />
                              <Key frame="245" value="51.2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="14" value="0.31365" />
                              <Key frame="130" value="1" />
                              <Key frame="132" value="1" />
                              <Key frame="146" value="1" />
                              <Key frame="158" value="1" />
                              <Key frame="171" value="1" />
                              <Key frame="183" value="1" />
                              <Key frame="196" value="1" />
                              <Key frame="200" value="1" />
                              <Key frame="245" value="0.31365" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="14" value="7.66551" />
                              <Key frame="132" value="2.2238" />
                              <Key frame="146" value="-9.32175" />
                              <Key frame="158" value="-20.6843" />
                              <Key frame="171" value="-29.1287" />
                              <Key frame="183" value="-37.8818" />
                              <Key frame="196" value="-40.107" />
                              <Key frame="245" value="7.66551" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="14" value="-6.77569" />
                              <Key frame="132" value="-4.79799" />
                              <Key frame="146" value="-1.05496" />
                              <Key frame="158" value="1.12651" />
                              <Key frame="171" value="2.74731" />
                              <Key frame="183" value="4.39387" />
                              <Key frame="196" value="4.58366" />
                              <Key frame="245" value="-6.77569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="14" value="-9.59239" />
                              <Key frame="132" value="-9.96412" />
                              <Key frame="146" value="-10.7682" />
                              <Key frame="158" value="-12.1865" />
                              <Key frame="171" value="-13.2958" />
                              <Key frame="183" value="-14.2426" />
                              <Key frame="196" value="-14.3239" />
                              <Key frame="245" value="-9.59239" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="14" value="-5.15978" />
                              <Key frame="132" value="11.5814" />
                              <Key frame="146" value="43.8992" />
                              <Key frame="158" value="71.6219" />
                              <Key frame="171" value="93.2035" />
                              <Key frame="183" value="115.708" />
                              <Key frame="196" value="120.894" />
                              <Key frame="245" value="-5.15978" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="14" value="82.8104" />
                              <Key frame="130" value="17.1" />
                              <Key frame="132" value="17" />
                              <Key frame="146" value="17" />
                              <Key frame="158" value="17.1" />
                              <Key frame="171" value="17.1" />
                              <Key frame="183" value="17" />
                              <Key frame="196" value="17" />
                              <Key frame="200" value="17.1" />
                              <Key frame="245" value="82.8104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="14" value="-12.4826" />
                              <Key frame="130" value="16.9" />
                              <Key frame="132" value="16" />
                              <Key frame="146" value="16.9" />
                              <Key frame="158" value="16" />
                              <Key frame="171" value="16" />
                              <Key frame="183" value="16" />
                              <Key frame="196" value="16" />
                              <Key frame="200" value="16.9" />
                              <Key frame="245" value="-12.4826" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="14" value="6.19916" />
                              <Key frame="130" value="-10.9" />
                              <Key frame="132" value="-10" />
                              <Key frame="146" value="-10.9" />
                              <Key frame="158" value="-10" />
                              <Key frame="171" value="-10" />
                              <Key frame="183" value="-10" />
                              <Key frame="196" value="-10" />
                              <Key frame="200" value="-10.9" />
                              <Key frame="245" value="6.19916" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="132" value="-11.5722" />
                              <Key frame="146" value="-18.5579" />
                              <Key frame="158" value="-9.53172" />
                              <Key frame="171" value="-2.22199" />
                              <Key frame="183" value="4.41186" />
                              <Key frame="196" value="5.72958" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="132" value="0" />
                              <Key frame="146" value="0" />
                              <Key frame="158" value="0" />
                              <Key frame="171" value="0" />
                              <Key frame="183" value="0" />
                              <Key frame="196" value="0" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="kneel (1)" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="245" y="1252">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="288">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="45" value="-11.5722" />
                              <Key frame="58" value="-18.5579" />
                              <Key frame="70" value="-9.53172" />
                              <Key frame="83" value="-2.22199" />
                              <Key frame="95" value="4.41186" />
                              <Key frame="108" value="5.72958" />
                              <Key frame="263" value="5.72958" />
                              <Key frame="276" value="5.72958" />
                              <Key frame="288" value="5.72958" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="45" value="0" />
                              <Key frame="58" value="0" />
                              <Key frame="70" value="0" />
                              <Key frame="83" value="0" />
                              <Key frame="95" value="0" />
                              <Key frame="108" value="0" />
                              <Key frame="263" value="0" />
                              <Key frame="276" value="0" />
                              <Key frame="288" value="0" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="45" value="-0.118421" />
                              <Key frame="58" value="-21.8115" />
                              <Key frame="70" value="-38.2716" />
                              <Key frame="83" value="-51.5918" />
                              <Key frame="95" value="-64.1121" />
                              <Key frame="108" value="-67.609" />
                              <Key frame="263" value="-67.609" />
                              <Key frame="276" value="-67.609" />
                              <Key frame="288" value="-67.609" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="45" value="-5.661" />
                              <Key frame="58" value="-2.50908" />
                              <Key frame="70" value="0.0899381" />
                              <Key frame="83" value="2.19329" />
                              <Key frame="95" value="4.0819" />
                              <Key frame="108" value="4.41178" />
                              <Key frame="263" value="4.41178" />
                              <Key frame="276" value="4.41178" />
                              <Key frame="288" value="4.41178" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="45" value="-25.8395" />
                              <Key frame="58" value="-40.3139" />
                              <Key frame="70" value="-46.7673" />
                              <Key frame="83" value="-53.2078" />
                              <Key frame="95" value="-59.6457" />
                              <Key frame="108" value="-62.0949" />
                              <Key frame="263" value="-62.1224" />
                              <Key frame="276" value="-62.1227" />
                              <Key frame="288" value="-62.1227" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="45" value="-68.1713" />
                              <Key frame="58" value="-62.6236" />
                              <Key frame="70" value="-56.772" />
                              <Key frame="83" value="-51.7568" />
                              <Key frame="95" value="-47.7663" />
                              <Key frame="108" value="-46.9077" />
                              <Key frame="263" value="-46.9103" />
                              <Key frame="276" value="-46.9104" />
                              <Key frame="288" value="-46.9104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="45" value="0.285345" />
                              <Key frame="58" value="0.206974" />
                              <Key frame="70" value="0.100947" />
                              <Key frame="83" value="0.0317875" />
                              <Key frame="95" value="0.00283994" />
                              <Key frame="108" value="0" />
                              <Key frame="263" value="0" />
                              <Key frame="276" value="0" />
                              <Key frame="288" value="0" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="45" value="4.7184" />
                              <Key frame="58" value="-7.63749" />
                              <Key frame="70" value="-19.4263" />
                              <Key frame="83" value="-28.9673" />
                              <Key frame="95" value="-37.8412" />
                              <Key frame="108" value="-40.107" />
                              <Key frame="263" value="-40.107" />
                              <Key frame="276" value="-40.107" />
                              <Key frame="288" value="-40.107" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="45" value="6.06242" />
                              <Key frame="58" value="2.61343" />
                              <Key frame="70" value="-0.214957" />
                              <Key frame="83" value="-2.2641" />
                              <Key frame="95" value="-4.22886" />
                              <Key frame="108" value="-4.58366" />
                              <Key frame="263" value="-4.58366" />
                              <Key frame="276" value="-4.58366" />
                              <Key frame="288" value="-4.58366" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="45" value="-9.89031" />
                              <Key frame="58" value="-10.6557" />
                              <Key frame="70" value="-12.1865" />
                              <Key frame="83" value="-13.2958" />
                              <Key frame="95" value="-14.2195" />
                              <Key frame="108" value="-14.3239" />
                              <Key frame="263" value="-14.3239" />
                              <Key frame="276" value="-14.3239" />
                              <Key frame="288" value="-14.3239" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="45" value="7.02636" />
                              <Key frame="58" value="40.5672" />
                              <Key frame="70" value="70.3805" />
                              <Key frame="83" value="92.1878" />
                              <Key frame="95" value="114.194" />
                              <Key frame="108" value="120.894" />
                              <Key frame="263" value="120.894" />
                              <Key frame="276" value="120.894" />
                              <Key frame="288" value="120.894" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="45" value="82.8936" />
                              <Key frame="58" value="83.0038" />
                              <Key frame="70" value="82.5144" />
                              <Key frame="83" value="81.2254" />
                              <Key frame="95" value="78.644" />
                              <Key frame="108" value="76.9735" />
                              <Key frame="263" value="76.9274" />
                              <Key frame="276" value="76.9268" />
                              <Key frame="288" value="76.9268" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="45" value="13.2886" />
                              <Key frame="58" value="14.2849" />
                              <Key frame="70" value="14.0298" />
                              <Key frame="83" value="13.6462" />
                              <Key frame="95" value="12.8093" />
                              <Key frame="108" value="11.3151" />
                              <Key frame="263" value="11.2482" />
                              <Key frame="276" value="11.2474" />
                              <Key frame="288" value="11.2474" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="45" value="5.8947" />
                              <Key frame="58" value="6.6563" />
                              <Key frame="70" value="7.54647" />
                              <Key frame="83" value="8.23194" />
                              <Key frame="95" value="8.54469" />
                              <Key frame="108" value="8.59431" />
                              <Key frame="263" value="8.59437" />
                              <Key frame="276" value="8.59437" />
                              <Key frame="288" value="8.59437" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="45" value="-2.94106" />
                              <Key frame="58" value="-23.226" />
                              <Key frame="70" value="-39.0751" />
                              <Key frame="83" value="-51.5535" />
                              <Key frame="95" value="-64.1024" />
                              <Key frame="108" value="-67.609" />
                              <Key frame="263" value="-67.609" />
                              <Key frame="276" value="-67.609" />
                              <Key frame="288" value="-67.609" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="45" value="4.50915" />
                              <Key frame="58" value="1.09258" />
                              <Key frame="70" value="-0.995171" />
                              <Key frame="83" value="-2.63867" />
                              <Key frame="95" value="-4.18095" />
                              <Key frame="108" value="-4.41178" />
                              <Key frame="263" value="-4.41178" />
                              <Key frame="276" value="-4.41178" />
                              <Key frame="288" value="-4.41178" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="45" value="27.1084" />
                              <Key frame="58" value="37.7061" />
                              <Key frame="70" value="45.1529" />
                              <Key frame="83" value="52.1369" />
                              <Key frame="95" value="59.2118" />
                              <Key frame="108" value="62.0934" />
                              <Key frame="263" value="62.1225" />
                              <Key frame="276" value="62.1227" />
                              <Key frame="288" value="62.1227" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="45" value="68.313" />
                              <Key frame="58" value="65.408" />
                              <Key frame="70" value="58.2805" />
                              <Key frame="83" value="52.7653" />
                              <Key frame="95" value="48.1355" />
                              <Key frame="108" value="46.9087" />
                              <Key frame="263" value="46.9104" />
                              <Key frame="276" value="46.9104" />
                              <Key frame="288" value="46.9104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="45" value="0.283164" />
                              <Key frame="58" value="0.218475" />
                              <Key frame="70" value="0.104496" />
                              <Key frame="83" value="0.0362716" />
                              <Key frame="95" value="0.00324112" />
                              <Key frame="108" value="0" />
                              <Key frame="263" value="0" />
                              <Key frame="276" value="0" />
                              <Key frame="288" value="0" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="45" value="2.2238" />
                              <Key frame="58" value="-9.32175" />
                              <Key frame="70" value="-20.6843" />
                              <Key frame="83" value="-29.1287" />
                              <Key frame="95" value="-37.8818" />
                              <Key frame="108" value="-40.107" />
                              <Key frame="263" value="-40.107" />
                              <Key frame="276" value="-40.107" />
                              <Key frame="288" value="-40.107" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="45" value="-4.79799" />
                              <Key frame="58" value="-1.05496" />
                              <Key frame="70" value="1.12651" />
                              <Key frame="83" value="2.74731" />
                              <Key frame="95" value="4.39387" />
                              <Key frame="108" value="4.58366" />
                              <Key frame="263" value="4.58366" />
                              <Key frame="276" value="4.58366" />
                              <Key frame="288" value="4.58366" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="45" value="-9.96412" />
                              <Key frame="58" value="-10.7682" />
                              <Key frame="70" value="-12.1865" />
                              <Key frame="83" value="-13.2958" />
                              <Key frame="95" value="-14.2426" />
                              <Key frame="108" value="-14.3239" />
                              <Key frame="263" value="-14.3239" />
                              <Key frame="276" value="-14.3239" />
                              <Key frame="288" value="-14.3239" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="45" value="11.5814" />
                              <Key frame="58" value="43.8992" />
                              <Key frame="70" value="71.6219" />
                              <Key frame="83" value="93.2035" />
                              <Key frame="95" value="115.708" />
                              <Key frame="108" value="120.894" />
                              <Key frame="263" value="120.894" />
                              <Key frame="276" value="120.894" />
                              <Key frame="288" value="120.894" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="45" value="82.7369" />
                              <Key frame="58" value="82.1419" />
                              <Key frame="70" value="82.0578" />
                              <Key frame="83" value="81.0474" />
                              <Key frame="95" value="78.4397" />
                              <Key frame="108" value="76.964" />
                              <Key frame="263" value="76.9273" />
                              <Key frame="276" value="76.9268" />
                              <Key frame="288" value="76.9268" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="45" value="-13.1574" />
                              <Key frame="58" value="-13.1555" />
                              <Key frame="70" value="-13.3485" />
                              <Key frame="83" value="-13.3703" />
                              <Key frame="95" value="-12.7495" />
                              <Key frame="108" value="-11.304" />
                              <Key frame="263" value="-11.2481" />
                              <Key frame="276" value="-11.2474" />
                              <Key frame="288" value="-11.2474" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="45" value="5.67208" />
                              <Key frame="58" value="4.37119" />
                              <Key frame="70" value="-1.68739" />
                              <Key frame="83" value="-6.34321" />
                              <Key frame="95" value="-8.33409" />
                              <Key frame="108" value="-8.59414" />
                              <Key frame="263" value="-8.59437" />
                              <Key frame="276" value="-8.59437" />
                              <Key frame="288" value="-8.59437" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="handclosing (1)" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="420" y="1204">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="230">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="14" value="4.79647" />
                              <Key frame="230" value="4.79647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="14" value="-6.06988" />
                              <Key frame="230" value="-6.06988" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="14" value="-31.4" />
                              <Key frame="130" value="-58.2" />
                              <Key frame="180" value="-58.2" />
                              <Key frame="230" value="-31.4" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="14" value="-51.2" />
                              <Key frame="130" value="-62.2" />
                              <Key frame="180" value="-62.2" />
                              <Key frame="230" value="-51.2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="14" value="0.31365" />
                              <Key frame="130" value="1" />
                              <Key frame="180" value="1" />
                              <Key frame="230" value="0.31365" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="14" value="7.87539" />
                              <Key frame="230" value="7.87539" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="14" value="6.40882" />
                              <Key frame="230" value="6.40882" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="14" value="-9.59239" />
                              <Key frame="230" value="-9.59239" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="14" value="-5.28273" />
                              <Key frame="230" value="-5.28273" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="14" value="82.9575" />
                              <Key frame="130" value="17.1" />
                              <Key frame="180" value="17.1" />
                              <Key frame="230" value="82.9575" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="14" value="12.6337" />
                              <Key frame="130" value="-16.9" />
                              <Key frame="180" value="-16.9" />
                              <Key frame="230" value="12.6337" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="14" value="6.19916" />
                              <Key frame="130" value="10.9" />
                              <Key frame="180" value="10.9" />
                              <Key frame="230" value="6.19916" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="14" value="4.83969" />
                              <Key frame="230" value="4.83969" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="14" value="6.30309" />
                              <Key frame="230" value="6.30309" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="14" value="31.4" />
                              <Key frame="130" value="58.2" />
                              <Key frame="180" value="58.2" />
                              <Key frame="230" value="31.4" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="14" value="51.2" />
                              <Key frame="130" value="62.2" />
                              <Key frame="180" value="62.2" />
                              <Key frame="230" value="51.2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="14" value="0.31365" />
                              <Key frame="130" value="1" />
                              <Key frame="180" value="1" />
                              <Key frame="230" value="0.31365" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="14" value="7.66551" />
                              <Key frame="230" value="7.66551" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="14" value="-6.77569" />
                              <Key frame="230" value="-6.77569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="14" value="-9.59239" />
                              <Key frame="230" value="-9.59239" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="14" value="-5.15978" />
                              <Key frame="230" value="-5.15978" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="14" value="82.8104" />
                              <Key frame="130" value="17.1" />
                              <Key frame="180" value="17.1" />
                              <Key frame="230" value="82.8104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="14" value="-12.4826" />
                              <Key frame="130" value="16.9" />
                              <Key frame="180" value="16.9" />
                              <Key frame="230" value="-12.4826" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="14" value="6.19916" />
                              <Key frame="130" value="-10.9" />
                              <Key frame="180" value="-10.9" />
                              <Key frame="230" value="6.19916" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="310" y="1401">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="463">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="13" value="-30.0566" />
                              <Key frame="26" value="-29.9687" />
                              <Key frame="38" value="-29.0019" />
                              <Key frame="51" value="-28.3866" />
                              <Key frame="63" value="-27.9472" />
                              <Key frame="76" value="-27.5956" />
                              <Key frame="88" value="-26.3651" />
                              <Key frame="101" value="-21.0916" />
                              <Key frame="113" value="-9.92936" />
                              <Key frame="126" value="-8.17153" />
                              <Key frame="138" value="-10.7204" />
                              <Key frame="151" value="-7.73207" />
                              <Key frame="163" value="-7.64417" />
                              <Key frame="176" value="-7.3805" />
                              <Key frame="188" value="-4.48007" />
                              <Key frame="201" value="-5.62267" />
                              <Key frame="213" value="-8.87466" />
                              <Key frame="226" value="-4.65585" />
                              <Key frame="238" value="-3.86484" />
                              <Key frame="251" value="-2" />
                              <Key frame="263" value="-2" />
                              <Key frame="276" value="-2" />
                              <Key frame="288" value="-2.107" />
                              <Key frame="301" value="-2" />
                              <Key frame="313" value="-2" />
                              <Key frame="326" value="-2" />
                              <Key frame="338" value="-2" />
                              <Key frame="351" value="-2" />
                              <Key frame="363" value="-2" />
                              <Key frame="376" value="-2" />
                              <Key frame="388" value="-2" />
                              <Key frame="401" value="-2" />
                              <Key frame="413" value="-2" />
                              <Key frame="426" value="-2" />
                              <Key frame="438" value="-2" />
                              <Key frame="451" value="-2" />
                              <Key frame="463" value="-2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="13" value="-53.9679" />
                              <Key frame="26" value="-53.9679" />
                              <Key frame="38" value="-54.4953" />
                              <Key frame="51" value="-56.2531" />
                              <Key frame="63" value="-58.4504" />
                              <Key frame="76" value="-58.011" />
                              <Key frame="88" value="-57.5715" />
                              <Key frame="101" value="-53.2648" />
                              <Key frame="113" value="-51.1554" />
                              <Key frame="126" value="-58.6262" />
                              <Key frame="138" value="-61.2629" />
                              <Key frame="151" value="-60.9114" />
                              <Key frame="163" value="-55.9894" />
                              <Key frame="176" value="-45.0909" />
                              <Key frame="188" value="-46.6729" />
                              <Key frame="201" value="-60.9993" />
                              <Key frame="213" value="-62.5813" />
                              <Key frame="226" value="-62.6692" />
                              <Key frame="238" value="-57.9231" />
                              <Key frame="251" value="-38.0595" />
                              <Key frame="263" value="-45.1788" />
                              <Key frame="276" value="-63.1965" />
                              <Key frame="288" value="-66.8001" />
                              <Key frame="301" value="-68.2943" />
                              <Key frame="313" value="-68.2943" />
                              <Key frame="326" value="-68.2064" />
                              <Key frame="338" value="-68.2064" />
                              <Key frame="351" value="-68.2064" />
                              <Key frame="363" value="-68.2943" />
                              <Key frame="376" value="-68.2943" />
                              <Key frame="388" value="-68.2064" />
                              <Key frame="401" value="-68.2943" />
                              <Key frame="413" value="-68.2064" />
                              <Key frame="426" value="-68.2064" />
                              <Key frame="438" value="-68.2943" />
                              <Key frame="451" value="-68.2943" />
                              <Key frame="463" value="-68.2064" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="13" value="0.316" />
                              <Key frame="26" value="0.316" />
                              <Key frame="38" value="0.316" />
                              <Key frame="51" value="0.316" />
                              <Key frame="63" value="0.316" />
                              <Key frame="76" value="0.316" />
                              <Key frame="88" value="0.316" />
                              <Key frame="101" value="0.316" />
                              <Key frame="113" value="0.316" />
                              <Key frame="126" value="0.316" />
                              <Key frame="138" value="0.316" />
                              <Key frame="151" value="0.316" />
                              <Key frame="163" value="0.316" />
                              <Key frame="176" value="0.316" />
                              <Key frame="188" value="0.316" />
                              <Key frame="201" value="0.316" />
                              <Key frame="213" value="0.316" />
                              <Key frame="226" value="0.316" />
                              <Key frame="238" value="0.316" />
                              <Key frame="251" value="0.316" />
                              <Key frame="263" value="0.316" />
                              <Key frame="276" value="0.316" />
                              <Key frame="288" value="0.316" />
                              <Key frame="301" value="0.316" />
                              <Key frame="313" value="0.316" />
                              <Key frame="326" value="0.316" />
                              <Key frame="338" value="0.316" />
                              <Key frame="351" value="0.316" />
                              <Key frame="363" value="0.316" />
                              <Key frame="376" value="0.316" />
                              <Key frame="388" value="0.316" />
                              <Key frame="401" value="0.316" />
                              <Key frame="413" value="0.316" />
                              <Key frame="426" value="0.316" />
                              <Key frame="438" value="0.316" />
                              <Key frame="451" value="0.316" />
                              <Key frame="463" value="0.316" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="13" value="73.6509" />
                              <Key frame="26" value="73.6509" />
                              <Key frame="38" value="72.4204" />
                              <Key frame="51" value="67.5863" />
                              <Key frame="63" value="59.4124" />
                              <Key frame="76" value="43.504" />
                              <Key frame="88" value="41.8341" />
                              <Key frame="101" value="47.0197" />
                              <Key frame="113" value="64.8617" />
                              <Key frame="126" value="72.6841" />
                              <Key frame="138" value="58.094" />
                              <Key frame="151" value="29.1777" />
                              <Key frame="163" value="19.3338" />
                              <Key frame="176" value="33.6601" />
                              <Key frame="188" value="61.6097" />
                              <Key frame="201" value="79.9791" />
                              <Key frame="213" value="60.9066" />
                              <Key frame="226" value="29.3534" />
                              <Key frame="238" value="14.2361" />
                              <Key frame="251" value="23.2889" />
                              <Key frame="263" value="62.5765" />
                              <Key frame="276" value="77.606" />
                              <Key frame="288" value="68.7289" />
                              <Key frame="301" value="68.2016" />
                              <Key frame="313" value="71.2778" />
                              <Key frame="326" value="71.2778" />
                              <Key frame="338" value="71.2778" />
                              <Key frame="351" value="71.2778" />
                              <Key frame="363" value="71.2778" />
                              <Key frame="376" value="71.2778" />
                              <Key frame="388" value="71.2778" />
                              <Key frame="401" value="71.2778" />
                              <Key frame="413" value="71.2778" />
                              <Key frame="426" value="71.2778" />
                              <Key frame="438" value="71.2778" />
                              <Key frame="451" value="71.2778" />
                              <Key frame="463" value="71.2778" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="13" value="-13.5377" />
                              <Key frame="26" value="-13.5377" />
                              <Key frame="38" value="-12.5709" />
                              <Key frame="51" value="5.62267" />
                              <Key frame="63" value="23.5526" />
                              <Key frame="76" value="37.0879" />
                              <Key frame="88" value="58.9729" />
                              <Key frame="101" value="67.7621" />
                              <Key frame="113" value="58.6214" />
                              <Key frame="126" value="36.5606" />
                              <Key frame="138" value="24.6073" />
                              <Key frame="151" value="25.8378" />
                              <Key frame="163" value="37.5274" />
                              <Key frame="176" value="58.1819" />
                              <Key frame="188" value="56.1604" />
                              <Key frame="201" value="30.3202" />
                              <Key frame="213" value="17.9275" />
                              <Key frame="226" value="16.9607" />
                              <Key frame="238" value="29.9687" />
                              <Key frame="251" value="52.5568" />
                              <Key frame="263" value="49.4806" />
                              <Key frame="276" value="25.3983" />
                              <Key frame="288" value="11.072" />
                              <Key frame="301" value="8.08364" />
                              <Key frame="313" value="7.20472" />
                              <Key frame="326" value="7.11683" />
                              <Key frame="338" value="7.11683" />
                              <Key frame="351" value="7.11683" />
                              <Key frame="363" value="7.11683" />
                              <Key frame="376" value="7.11683" />
                              <Key frame="388" value="7.11683" />
                              <Key frame="401" value="7.11683" />
                              <Key frame="413" value="7.11683" />
                              <Key frame="426" value="7.11683" />
                              <Key frame="438" value="7.11683" />
                              <Key frame="451" value="7.11683" />
                              <Key frame="463" value="7.11683" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="13" value="-53.3527" />
                              <Key frame="26" value="-53.3527" />
                              <Key frame="38" value="-53.4406" />
                              <Key frame="51" value="-54.7589" />
                              <Key frame="63" value="-54.671" />
                              <Key frame="76" value="-48.3428" />
                              <Key frame="88" value="-29.0946" />
                              <Key frame="101" value="-24.3484" />
                              <Key frame="113" value="-24.9637" />
                              <Key frame="126" value="-27.8641" />
                              <Key frame="138" value="-29.3582" />
                              <Key frame="151" value="-29.8856" />
                              <Key frame="163" value="-29.7098" />
                              <Key frame="176" value="-28.743" />
                              <Key frame="188" value="-30.5008" />
                              <Key frame="201" value="-31.8192" />
                              <Key frame="213" value="-33.7528" />
                              <Key frame="226" value="-34.5439" />
                              <Key frame="238" value="-34.1044" />
                              <Key frame="251" value="-32.9618" />
                              <Key frame="263" value="-33.2255" />
                              <Key frame="276" value="-33.8407" />
                              <Key frame="288" value="-34.6318" />
                              <Key frame="301" value="-34.9833" />
                              <Key frame="313" value="-33.3134" />
                              <Key frame="326" value="-33.3134" />
                              <Key frame="338" value="-33.3134" />
                              <Key frame="351" value="-33.3134" />
                              <Key frame="363" value="-33.3134" />
                              <Key frame="376" value="-33.3134" />
                              <Key frame="388" value="-33.3134" />
                              <Key frame="401" value="-33.3134" />
                              <Key frame="413" value="-33.3134" />
                              <Key frame="426" value="-33.3134" />
                              <Key frame="438" value="-33.3134" />
                              <Key frame="451" value="-33.3134" />
                              <Key frame="463" value="-33.3134" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="13" value="55.2863" />
                              <Key frame="26" value="55.2863" />
                              <Key frame="38" value="55.1984" />
                              <Key frame="51" value="49.6612" />
                              <Key frame="63" value="37.8837" />
                              <Key frame="76" value="28.4793" />
                              <Key frame="88" value="17.7565" />
                              <Key frame="101" value="6.06693" />
                              <Key frame="113" value="2" />
                              <Key frame="126" value="5.10013" />
                              <Key frame="138" value="4.13332" />
                              <Key frame="151" value="4.74855" />
                              <Key frame="163" value="3.25439" />
                              <Key frame="176" value="2" />
                              <Key frame="188" value="2" />
                              <Key frame="201" value="2.99072" />
                              <Key frame="213" value="3.69386" />
                              <Key frame="226" value="3.95753" />
                              <Key frame="238" value="5.18802" />
                              <Key frame="251" value="2" />
                              <Key frame="263" value="2" />
                              <Key frame="276" value="3.86964" />
                              <Key frame="288" value="13.0983" />
                              <Key frame="301" value="15.2956" />
                              <Key frame="313" value="13.362" />
                              <Key frame="326" value="13.362" />
                              <Key frame="338" value="13.362" />
                              <Key frame="351" value="13.362" />
                              <Key frame="363" value="13.362" />
                              <Key frame="376" value="13.362" />
                              <Key frame="388" value="13.362" />
                              <Key frame="401" value="13.362" />
                              <Key frame="413" value="13.362" />
                              <Key frame="426" value="13.362" />
                              <Key frame="438" value="13.362" />
                              <Key frame="451" value="13.362" />
                              <Key frame="463" value="13.362" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="13" value="67.6742" />
                              <Key frame="26" value="67.6742" />
                              <Key frame="38" value="68.9926" />
                              <Key frame="51" value="74.4419" />
                              <Key frame="63" value="78.1333" />
                              <Key frame="76" value="78.3091" />
                              <Key frame="88" value="77.5181" />
                              <Key frame="101" value="77.3423" />
                              <Key frame="113" value="77.1665" />
                              <Key frame="126" value="76.9908" />
                              <Key frame="138" value="73.9145" />
                              <Key frame="151" value="70.9262" />
                              <Key frame="163" value="66.6195" />
                              <Key frame="176" value="65.4769" />
                              <Key frame="188" value="66.0043" />
                              <Key frame="201" value="68.1137" />
                              <Key frame="213" value="68.2016" />
                              <Key frame="226" value="67.6742" />
                              <Key frame="238" value="63.6312" />
                              <Key frame="251" value="58.8851" />
                              <Key frame="263" value="58.8851" />
                              <Key frame="276" value="61.8734" />
                              <Key frame="288" value="62.8402" />
                              <Key frame="301" value="65.3011" />
                              <Key frame="313" value="65.2133" />
                              <Key frame="326" value="65.2133" />
                              <Key frame="338" value="65.2133" />
                              <Key frame="351" value="65.2133" />
                              <Key frame="363" value="65.2133" />
                              <Key frame="376" value="65.2133" />
                              <Key frame="388" value="65.2133" />
                              <Key frame="401" value="65.2133" />
                              <Key frame="413" value="65.2133" />
                              <Key frame="426" value="65.2133" />
                              <Key frame="438" value="65.2133" />
                              <Key frame="451" value="65.2133" />
                              <Key frame="463" value="65.2133" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="13" value="0.2464" />
                              <Key frame="26" value="0.2464" />
                              <Key frame="38" value="0.2464" />
                              <Key frame="51" value="0.2468" />
                              <Key frame="63" value="0.2468" />
                              <Key frame="76" value="0.2468" />
                              <Key frame="88" value="0.2464" />
                              <Key frame="101" value="0.2464" />
                              <Key frame="113" value="0.2464" />
                              <Key frame="126" value="0.2464" />
                              <Key frame="138" value="0.2468" />
                              <Key frame="151" value="0.2468" />
                              <Key frame="163" value="0.2464" />
                              <Key frame="176" value="0.2468" />
                              <Key frame="188" value="0.2468" />
                              <Key frame="201" value="0.2468" />
                              <Key frame="213" value="0.2464" />
                              <Key frame="226" value="0.2464" />
                              <Key frame="238" value="0.2464" />
                              <Key frame="251" value="0.2464" />
                              <Key frame="263" value="0.2468" />
                              <Key frame="276" value="0.2464" />
                              <Key frame="288" value="0.2464" />
                              <Key frame="301" value="0.2468" />
                              <Key frame="313" value="0.2464" />
                              <Key frame="326" value="0.2468" />
                              <Key frame="338" value="0.2468" />
                              <Key frame="351" value="0.2464" />
                              <Key frame="363" value="0.2468" />
                              <Key frame="376" value="0.2468" />
                              <Key frame="388" value="0.2464" />
                              <Key frame="401" value="0.2464" />
                              <Key frame="413" value="0.2468" />
                              <Key frame="426" value="0.2464" />
                              <Key frame="438" value="0.2464" />
                              <Key frame="451" value="0.2464" />
                              <Key frame="463" value="0.2468" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="13" value="87.6305" />
                              <Key frame="26" value="87.6305" />
                              <Key frame="38" value="86.4" />
                              <Key frame="51" value="87.982" />
                              <Key frame="63" value="92.7282" />
                              <Key frame="76" value="92.6403" />
                              <Key frame="88" value="92.904" />
                              <Key frame="101" value="96.3317" />
                              <Key frame="113" value="106.615" />
                              <Key frame="126" value="102.308" />
                              <Key frame="138" value="66.5365" />
                              <Key frame="151" value="52.2101" />
                              <Key frame="163" value="50.1886" />
                              <Key frame="176" value="59.2414" />
                              <Key frame="188" value="86.8394" />
                              <Key frame="201" value="97.2986" />
                              <Key frame="213" value="68.0306" />
                              <Key frame="226" value="44.9151" />
                              <Key frame="238" value="39.6416" />
                              <Key frame="251" value="48.9581" />
                              <Key frame="263" value="78.0503" />
                              <Key frame="276" value="92.2887" />
                              <Key frame="288" value="80.7749" />
                              <Key frame="301" value="78.5776" />
                              <Key frame="313" value="78.5776" />
                              <Key frame="326" value="80.9507" />
                              <Key frame="338" value="81.478" />
                              <Key frame="351" value="81.478" />
                              <Key frame="363" value="81.478" />
                              <Key frame="376" value="81.478" />
                              <Key frame="388" value="81.478" />
                              <Key frame="401" value="81.478" />
                              <Key frame="413" value="81.478" />
                              <Key frame="426" value="81.478" />
                              <Key frame="438" value="81.478" />
                              <Key frame="451" value="81.478" />
                              <Key frame="463" value="81.478" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="13" value="5.53478" />
                              <Key frame="26" value="5.62267" />
                              <Key frame="38" value="2.0191" />
                              <Key frame="51" value="-13.8893" />
                              <Key frame="63" value="-39.5537" />
                              <Key frame="76" value="-65.6575" />
                              <Key frame="88" value="-76" />
                              <Key frame="101" value="-75.6772" />
                              <Key frame="113" value="-60.5598" />
                              <Key frame="126" value="-39.5537" />
                              <Key frame="138" value="-31.7313" />
                              <Key frame="151" value="-49.7491" />
                              <Key frame="163" value="-72.1615" />
                              <Key frame="176" value="-74.6225" />
                              <Key frame="188" value="-60.1203" />
                              <Key frame="201" value="-34.1044" />
                              <Key frame="213" value="-22.5906" />
                              <Key frame="226" value="-36.4775" />
                              <Key frame="238" value="-62.5813" />
                              <Key frame="251" value="-72.4252" />
                              <Key frame="263" value="-60.9993" />
                              <Key frame="276" value="-37.0048" />
                              <Key frame="288" value="-21.1843" />
                              <Key frame="301" value="-10.5494" />
                              <Key frame="313" value="-8.70368" />
                              <Key frame="326" value="-8.26423" />
                              <Key frame="338" value="-8.00056" />
                              <Key frame="351" value="-8.00056" />
                              <Key frame="363" value="-8.00056" />
                              <Key frame="376" value="-8.00056" />
                              <Key frame="388" value="-8.00056" />
                              <Key frame="401" value="-8.00056" />
                              <Key frame="413" value="-8.00056" />
                              <Key frame="426" value="-8.00056" />
                              <Key frame="438" value="-8.00056" />
                              <Key frame="451" value="-8.00056" />
                              <Key frame="463" value="-8.00056" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="13" value="-25.4031" />
                              <Key frame="26" value="-25.4031" />
                              <Key frame="38" value="-24.8758" />
                              <Key frame="51" value="-24.1726" />
                              <Key frame="63" value="-24.1726" />
                              <Key frame="76" value="-24.3484" />
                              <Key frame="88" value="-27.3367" />
                              <Key frame="101" value="-29.1825" />
                              <Key frame="113" value="-29.0067" />
                              <Key frame="126" value="-29.0946" />
                              <Key frame="138" value="-29.0946" />
                              <Key frame="151" value="-30.4129" />
                              <Key frame="163" value="-30.5887" />
                              <Key frame="176" value="-30.3251" />
                              <Key frame="188" value="-27.4246" />
                              <Key frame="201" value="-27.1609" />
                              <Key frame="213" value="-27.2488" />
                              <Key frame="226" value="-27.6883" />
                              <Key frame="238" value="-29.1825" />
                              <Key frame="251" value="-29.7977" />
                              <Key frame="263" value="-29.1825" />
                              <Key frame="276" value="-28.3035" />
                              <Key frame="288" value="-28.3914" />
                              <Key frame="301" value="-28.3035" />
                              <Key frame="313" value="-27.4246" />
                              <Key frame="326" value="-27.4246" />
                              <Key frame="338" value="-27.3367" />
                              <Key frame="351" value="-27.4246" />
                              <Key frame="363" value="-27.4246" />
                              <Key frame="376" value="-27.4246" />
                              <Key frame="388" value="-27.4246" />
                              <Key frame="401" value="-27.4246" />
                              <Key frame="413" value="-27.4246" />
                              <Key frame="426" value="-27.4246" />
                              <Key frame="438" value="-27.4246" />
                              <Key frame="451" value="-27.4246" />
                              <Key frame="463" value="-27.4246" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Say Text" id="8" localization="8" tooltip="Say the text received on its input." x="354" y="202">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="66" y="145">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Hi, my name is Sam, I will be your personal coach today.")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Hi, my name is Sam, I will be your personal coach today.]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Speech Reco." id="10" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="1071" y="194">
                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                        <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="sure;yes;" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                        <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                        <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
                        <Resource name="Speech recognition" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Switch Case" id="11" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="1242" y="206">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("sure")):
			self.output_1(p)
		elif(p == self.typeConversion("yes")):
			self.output_2(p)
		elif(p == self.typeConversion("ok")):
			self.output_3(p)
		elif(p == self.typeConversion("okay")):
			self.output_4(p)
		elif(p == self.typeConversion("No")):
			self.output_5(p)
		elif(p == self.typeConversion("I don not")):
			self.output_6(p)
		elif(p == self.typeConversion("I don't")):
			self.output_7(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>&quot;sure&quot;</keyword>
                            <keyword>&quot;yes&quot;</keyword>
                            <keyword>&quot;ok&quot;</keyword>
                            <keyword>&quot;okay&quot;</keyword>
                            <keyword>&quot;No&quot;</keyword>
                            <keyword>&quot;I don not&quot;</keyword>
                            <keyword>&quot;I don&apos;t&quot;</keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                        <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                        <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                        <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                        <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                      </Box>
                      <Box name="Say Text (1)" id="12" localization="8" tooltip="Say the text received on its input." x="657" y="578">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="300" y="495">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Oh, come on! Exercising is good for your health!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Oh, come on! Exercising is good for your health!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Text Edit (2)" id="15" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1918" y="2011">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Great! Let us start our training now!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Great! Let us start our training now!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1749" y="2189">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Ok lets so some exercises. They will start off easy so that we can get warmed up")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Ok lets so some exercises. They will start off easy so that we can get warmed up]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (5)" id="21" localization="8" tooltip="Say the text received on its input." x="1837" y="34">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (5)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1452" y="10">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Sorry, I didn\'t get that, say again please?\n")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Sorry, I didn't get that, say again please?
]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Waving" id="29" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="212" y="29">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="137" size="137">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="81.0772" />
                              <Key frame="75" value="-47.1" />
                              <Key frame="90" value="-47.1" />
                              <Key frame="105" value="-47.1" />
                              <Key frame="121" value="-47.1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="75" value="-24.6" />
                              <Key frame="83" value="-3.5" />
                              <Key frame="90" value="-24.6" />
                              <Key frame="98" value="-3.5" />
                              <Key frame="105" value="-24.6" />
                              <Key frame="113" value="-3.5" />
                              <Key frame="121" value="-24.6" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="75" value="28.7" />
                              <Key frame="90" value="28.7" />
                              <Key frame="105" value="28.7" />
                              <Key frame="121" value="28.7" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="75" value="-2.2" />
                              <Key frame="90" value="-2.2" />
                              <Key frame="105" value="-2.2" />
                              <Key frame="121" value="-2.2" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Text Edit (9)" id="31" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="512" y="107">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("What a lovely day today! Shall we start our training now? ")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[What a lovely day today! Shall we start our training now? ]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (8)" id="16" localization="8" tooltip="Say the text received on its input." x="915" y="44">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Waving (1)" id="32" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="2006" y="309">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="137" size="137">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="81.0772" />
                              <Key frame="75" value="-47.1" />
                              <Key frame="90" value="-47.1" />
                              <Key frame="105" value="-47.1" />
                              <Key frame="121" value="-47.1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="75" value="-24.6" />
                              <Key frame="83" value="-3.5" />
                              <Key frame="90" value="-24.6" />
                              <Key frame="98" value="-3.5" />
                              <Key frame="105" value="-24.6" />
                              <Key frame="113" value="-3.5" />
                              <Key frame="121" value="-24.6" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="75" value="28.7" />
                              <Key frame="90" value="28.7" />
                              <Key frame="105" value="28.7" />
                              <Key frame="121" value="28.7" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="75" value="-2.2" />
                              <Key frame="90" value="-2.2" />
                              <Key frame="105" value="-2.2" />
                              <Key frame="121" value="-2.2" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Speech Reco. (1)" id="33" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="856" y="512">
                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                        <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="sure;yes;" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                        <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                        <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
                        <Resource name="Speech recognition" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Switch Case (1)" id="34" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="1032" y="566">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("sure")):
			self.output_1(p)
		elif(p == self.typeConversion("yes")):
			self.output_2(p)
		elif(p == self.typeConversion("ok")):
			self.output_3(p)
		elif(p == self.typeConversion("okay")):
			self.output_4(p)
		elif(p == self.typeConversion("No")):
			self.output_5(p)
		elif(p == self.typeConversion("I don not")):
			self.output_6(p)
		elif(p == self.typeConversion("I don't")):
			self.output_7(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>&quot;sure&quot;</keyword>
                            <keyword>&quot;yes&quot;</keyword>
                            <keyword>&quot;ok&quot;</keyword>
                            <keyword>&quot;okay&quot;</keyword>
                            <keyword>&quot;No&quot;</keyword>
                            <keyword>&quot;I don not&quot;</keyword>
                            <keyword>&quot;I don&apos;t&quot;</keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                        <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                        <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                        <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                        <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                      </Box>
                      <Box name="Say Text (9)" id="35" localization="8" tooltip="Say the text received on its input." x="1872" y="470">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (10)" id="36" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1583" y="469">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("It\'s alright, We can do this trainig tomorrow! \nSee you then!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[It's alright, We can do this trainig tomorrow! 
See you then!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Counter" id="19" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="2121" y="134">
                        <bitmap>media/images/box/loop.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                      </Box>
                      <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="2444" y="476">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (4)" id="23" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="2178" y="450">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Sorry, is my voice too low? I\'ll raise my volume now.")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Sorry, is my voice too low? I'll raise my volume now.]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Set Speaker Vol." id="24" localization="8" tooltip="Set the sound volume between 0 (mute) and 100 (max).&#x0A;&#x0A;V1.1.0&#x0A;" x="2271" y="78">
                        <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onSet(self):
        try:
            self.audiodevice = self.session().service("ALAudioDevice")
            self.audiodevice.setOutputVolume(self.getParameter("Volume (%)"))
        except Exception as e:
            self.logger.error(e)

        self.onReady() # activate output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                        <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="70" default_value="50" min="0" max="100" tooltip="Percentage of maximum output volume." id="4" />
                      </Box>
                      <Box name="Say Text (6)" id="25" localization="8" tooltip="Say the text received on its input." x="1044" y="1039">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (6)" id="26" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="704" y="961">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Ok, I\'ve just raised my volume, can you hear me clearly now?")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Ok, I've just raised my volume, can you hear me clearly now?]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Speech Reco. (2)" id="27" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="1220" y="981">
                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                        <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="sure;yes;" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                        <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                        <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
                        <Resource name="Speech recognition" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Switch Case (2)" id="28" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="1405" y="993">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("sure")):
			self.output_1(p)
		elif(p == self.typeConversion("yes")):
			self.output_2(p)
		elif(p == self.typeConversion("ok")):
			self.output_3(p)
		elif(p == self.typeConversion("okay")):
			self.output_4(p)
		elif(p == self.typeConversion("No")):
			self.output_5(p)
		elif(p == self.typeConversion("I don not")):
			self.output_6(p)
		elif(p == self.typeConversion("I don't")):
			self.output_7(p)
		elif(p == self.typeConversion("I cannot")):
			self.output_8(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>&quot;sure&quot;</keyword>
                            <keyword>&quot;yes&quot;</keyword>
                            <keyword>&quot;ok&quot;</keyword>
                            <keyword>&quot;okay&quot;</keyword>
                            <keyword>&quot;No&quot;</keyword>
                            <keyword>&quot;I don not&quot;</keyword>
                            <keyword>&quot;I don&apos;t&quot;</keyword>
                            <keyword>&quot;I cannot&quot;</keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                        <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                        <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                        <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                        <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                        <Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" />
                      </Box>
                      <Box name="Set Speaker Vol. (1)" id="30" localization="8" tooltip="Set the sound volume between 0 (mute) and 100 (max).&#x0A;&#x0A;V1.1.0&#x0A;" x="1713" y="1139">
                        <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onSet(self):
        try:
            self.audiodevice = self.session().service("ALAudioDevice")
            self.audiodevice.setOutputVolume(self.getParameter("Volume (%)"))
        except Exception as e:
            self.logger.error(e)

        self.onReady() # activate output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                        <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="80" default_value="50" min="0" max="100" tooltip="Percentage of maximum output volume." id="4" />
                      </Box>
                      <Box name="Say Text (7)" id="4" localization="8" tooltip="Say the text received on its input." x="2838" y="1016">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (7)" id="37" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="2382" y="986">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Nice, let\'s get back to the start. Would you like to do exercise with me today?")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Nice, let's get back to the start. Would you like to do exercise with me today?]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (10)" id="38" localization="8" tooltip="Say the text received on its input." x="1595" y="1463">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (8)" id="39" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1278" y="1399">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Ok, I\'m currently speaking as lould as I can, can you hear me clearly now?")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Ok, I'm currently speaking as lould as I can, can you hear me clearly now?]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (11)" id="40" localization="8" tooltip="Say the text received on its input." x="2275" y="1247">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (11)" id="41" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1945" y="1206">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Okay, I\'ll speak loulder from now on. Can you hear me now?")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Okay, I'll speak loulder from now on. Can you hear me now?]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Speech Reco. (3)" id="42" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="583" y="1402">
                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                        <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="sure;yes;" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                        <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                        <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
                        <Resource name="Speech recognition" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Switch Case (3)" id="43" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="769" y="1243">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("sure")):
			self.output_1(p)
		elif(p == self.typeConversion("yes")):
			self.output_2(p)
		elif(p == self.typeConversion("ok")):
			self.output_3(p)
		elif(p == self.typeConversion("okay")):
			self.output_4(p)
		elif(p == self.typeConversion("No")):
			self.output_5(p)
		elif(p == self.typeConversion("I don not")):
			self.output_6(p)
		elif(p == self.typeConversion("I don't")):
			self.output_7(p)
		elif(p == self.typeConversion("I cannot")):
			self.output_8(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>&quot;sure&quot;</keyword>
                            <keyword>&quot;yes&quot;</keyword>
                            <keyword>&quot;ok&quot;</keyword>
                            <keyword>&quot;okay&quot;</keyword>
                            <keyword>&quot;No&quot;</keyword>
                            <keyword>&quot;I don not&quot;</keyword>
                            <keyword>&quot;I don&apos;t&quot;</keyword>
                            <keyword>&quot;I cannot&quot;</keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                        <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                        <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                        <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                        <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                        <Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" />
                      </Box>
                      <Box name="Set Speaker Vol. (2)" id="44" localization="8" tooltip="Set the sound volume between 0 (mute) and 100 (max).&#x0A;&#x0A;V1.1.0&#x0A;" x="1065" y="1542">
                        <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onSet(self):
        try:
            self.audiodevice = self.session().service("ALAudioDevice")
            self.audiodevice.setOutputVolume(self.getParameter("Volume (%)"))
        except Exception as e:
            self.logger.error(e)

        self.onReady() # activate output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                        <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="50" min="0" max="100" tooltip="Percentage of maximum output volume." id="4" />
                      </Box>
                      <Box name="Speech Reco. (4)" id="45" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="1803" y="1563">
                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                        <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="sure;yes;" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                        <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                        <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
                        <Resource name="Speech recognition" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Switch Case (4)" id="46" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="2006" y="1546">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("sure")):
			self.output_1(p)
		elif(p == self.typeConversion("yes")):
			self.output_2(p)
		elif(p == self.typeConversion("ok")):
			self.output_3(p)
		elif(p == self.typeConversion("okay")):
			self.output_4(p)
		elif(p == self.typeConversion("No")):
			self.output_5(p)
		elif(p == self.typeConversion("I don not")):
			self.output_6(p)
		elif(p == self.typeConversion("I don't")):
			self.output_7(p)
		elif(p == self.typeConversion("I cannot")):
			self.output_8(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>&quot;sure&quot;</keyword>
                            <keyword>&quot;yes&quot;</keyword>
                            <keyword>&quot;ok&quot;</keyword>
                            <keyword>&quot;okay&quot;</keyword>
                            <keyword>&quot;No&quot;</keyword>
                            <keyword>&quot;I don not&quot;</keyword>
                            <keyword>&quot;I don&apos;t&quot;</keyword>
                            <keyword>&quot;I cannot&quot;</keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                        <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                        <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                        <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                        <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                        <Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" />
                      </Box>
                      <Box name="Say Text (12)" id="47" localization="8" tooltip="Say the text received on its input." x="2664" y="1544">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (12)" id="48" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="2364" y="1525">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("I\'m sorry about that, I guess probably because of the background noise is too lould.\nDo you want to start tomorrow?")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[I'm sorry about that, I guess probably because of the background noise is too lould.
Do you want to start tomorrow?]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Speech Reco. (5)" id="49" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="2976" y="1444">
                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                        <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="sure;yes;" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                        <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                        <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
                        <Resource name="Speech recognition" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Switch Case (5)" id="50" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="2830" y="1694">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("sure")):
			self.output_1(p)
		elif(p == self.typeConversion("yes")):
			self.output_2(p)
		elif(p == self.typeConversion("ok")):
			self.output_3(p)
		elif(p == self.typeConversion("okay")):
			self.output_4(p)
		elif(p == self.typeConversion("No")):
			self.output_5(p)
		elif(p == self.typeConversion("I do not")):
			self.output_6(p)
		elif(p == self.typeConversion("I don't")):
			self.output_7(p)
		elif(p == self.typeConversion("I cannot")):
			self.output_8(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>&quot;sure&quot;</keyword>
                            <keyword>&quot;yes&quot;</keyword>
                            <keyword>&quot;ok&quot;</keyword>
                            <keyword>&quot;okay&quot;</keyword>
                            <keyword>&quot;No&quot;</keyword>
                            <keyword>&quot;I do not&quot;</keyword>
                            <keyword>&quot;I don&apos;t&quot;</keyword>
                            <keyword>&quot;I cannot&quot;</keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                        <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                        <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                        <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                        <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                        <Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" />
                      </Box>
                      <Link inputowner="14" indexofinput="2" outputowner="15" indexofoutput="3" />
                      <Link inputowner="17" indexofinput="2" outputowner="18" indexofoutput="3" />
                      <Link inputowner="18" indexofinput="2" outputowner="14" indexofoutput="4" />
                      <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="3" />
                      <Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="5" />
                      <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="3" />
                      <Link inputowner="21" indexofinput="2" outputowner="22" indexofoutput="3" />
                      <Link inputowner="22" indexofinput="2" outputowner="11" indexofoutput="3" />
                      <Link inputowner="16" indexofinput="2" outputowner="31" indexofoutput="3" />
                      <Link inputowner="31" indexofinput="2" outputowner="8" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="16" indexofoutput="4" />
                      <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="10" />
                      <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="9" />
                      <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="8" />
                      <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="5" />
                      <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="6" />
                      <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="7" />
                      <Link inputowner="34" indexofinput="2" outputowner="33" indexofoutput="5" />
                      <Link inputowner="33" indexofinput="2" outputowner="12" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="34" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="34" indexofoutput="5" />
                      <Link inputowner="15" indexofinput="2" outputowner="34" indexofoutput="7" />
                      <Link inputowner="15" indexofinput="2" outputowner="34" indexofoutput="6" />
                      <Link inputowner="35" indexofinput="2" outputowner="36" indexofoutput="3" />
                      <Link inputowner="32" indexofinput="2" outputowner="35" indexofoutput="4" />
                      <Link inputowner="33" indexofinput="3" outputowner="32" indexofoutput="4" />
                      <Link inputowner="36" indexofinput="2" outputowner="34" indexofoutput="8" />
                      <Link inputowner="36" indexofinput="2" outputowner="34" indexofoutput="9" />
                      <Link inputowner="36" indexofinput="2" outputowner="34" indexofoutput="10" />
                      <Link inputowner="19" indexofinput="2" outputowner="21" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="3" outputowner="21" indexofoutput="4" />
                      <Link inputowner="20" indexofinput="2" outputowner="23" indexofoutput="3" />
                      <Link inputowner="24" indexofinput="2" outputowner="19" indexofoutput="5" />
                      <Link inputowner="23" indexofinput="2" outputowner="24" indexofoutput="3" />
                      <Link inputowner="25" indexofinput="2" outputowner="26" indexofoutput="3" />
                      <Link inputowner="28" indexofinput="2" outputowner="27" indexofoutput="5" />
                      <Link inputowner="27" indexofinput="2" outputowner="25" indexofoutput="4" />
                      <Link inputowner="26" indexofinput="2" outputowner="20" indexofoutput="4" />
                      <Link inputowner="30" indexofinput="2" outputowner="28" indexofoutput="8" />
                      <Link inputowner="30" indexofinput="2" outputowner="28" indexofoutput="9" />
                      <Link inputowner="30" indexofinput="2" outputowner="28" indexofoutput="10" />
                      <Link inputowner="30" indexofinput="2" outputowner="28" indexofoutput="11" />
                      <Link inputowner="4" indexofinput="2" outputowner="37" indexofoutput="3" />
                      <Link inputowner="11" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="38" indexofinput="2" outputowner="39" indexofoutput="3" />
                      <Link inputowner="40" indexofinput="2" outputowner="41" indexofoutput="3" />
                      <Link inputowner="37" indexofinput="2" outputowner="28" indexofoutput="4" />
                      <Link inputowner="37" indexofinput="2" outputowner="28" indexofoutput="5" />
                      <Link inputowner="37" indexofinput="2" outputowner="28" indexofoutput="6" />
                      <Link inputowner="37" indexofinput="2" outputowner="28" indexofoutput="7" />
                      <Link inputowner="41" indexofinput="2" outputowner="30" indexofoutput="3" />
                      <Link inputowner="43" indexofinput="2" outputowner="42" indexofoutput="5" />
                      <Link inputowner="44" indexofinput="2" outputowner="43" indexofoutput="8" />
                      <Link inputowner="44" indexofinput="2" outputowner="43" indexofoutput="9" />
                      <Link inputowner="44" indexofinput="2" outputowner="43" indexofoutput="10" />
                      <Link inputowner="44" indexofinput="2" outputowner="43" indexofoutput="11" />
                      <Link inputowner="27" indexofinput="3" outputowner="30" indexofoutput="3" />
                      <Link inputowner="27" indexofinput="3" outputowner="4" indexofoutput="4" />
                      <Link inputowner="42" indexofinput="2" outputowner="40" indexofoutput="4" />
                      <Link inputowner="39" indexofinput="2" outputowner="44" indexofoutput="3" />
                      <Link inputowner="46" indexofinput="2" outputowner="45" indexofoutput="5" />
                      <Link inputowner="45" indexofinput="2" outputowner="38" indexofoutput="4" />
                      <Link inputowner="37" indexofinput="2" outputowner="46" indexofoutput="4" />
                      <Link inputowner="37" indexofinput="2" outputowner="46" indexofoutput="5" />
                      <Link inputowner="37" indexofinput="2" outputowner="46" indexofoutput="6" />
                      <Link inputowner="37" indexofinput="2" outputowner="46" indexofoutput="7" />
                      <Link inputowner="42" indexofinput="3" outputowner="44" indexofoutput="3" />
                      <Link inputowner="37" indexofinput="2" outputowner="43" indexofoutput="4" />
                      <Link inputowner="37" indexofinput="2" outputowner="43" indexofoutput="5" />
                      <Link inputowner="37" indexofinput="2" outputowner="43" indexofoutput="6" />
                      <Link inputowner="37" indexofinput="2" outputowner="43" indexofoutput="7" />
                      <Link inputowner="47" indexofinput="2" outputowner="48" indexofoutput="3" />
                      <Link inputowner="48" indexofinput="2" outputowner="46" indexofoutput="8" />
                      <Link inputowner="48" indexofinput="2" outputowner="46" indexofoutput="9" />
                      <Link inputowner="48" indexofinput="2" outputowner="46" indexofoutput="10" />
                      <Link inputowner="48" indexofinput="2" outputowner="46" indexofoutput="11" />
                      <Link inputowner="45" indexofinput="3" outputowner="47" indexofoutput="4" />
                      <Link inputowner="45" indexofinput="3" outputowner="4" indexofoutput="4" />
                      <Link inputowner="42" indexofinput="3" outputowner="4" indexofoutput="4" />
                      <Link inputowner="50" indexofinput="2" outputowner="49" indexofoutput="5" />
                      <Link inputowner="49" indexofinput="2" outputowner="47" indexofoutput="4" />
                      <Link inputowner="36" indexofinput="2" outputowner="50" indexofoutput="4" />
                      <Link inputowner="36" indexofinput="2" outputowner="50" indexofoutput="5" />
                      <Link inputowner="36" indexofinput="2" outputowner="50" indexofoutput="6" />
                      <Link inputowner="36" indexofinput="2" outputowner="50" indexofoutput="7" />
                      <Link inputowner="15" indexofinput="2" outputowner="50" indexofoutput="8" />
                      <Link inputowner="15" indexofinput="2" outputowner="50" indexofoutput="9" />
                      <Link inputowner="15" indexofinput="2" outputowner="50" indexofoutput="10" />
                      <Link inputowner="15" indexofinput="2" outputowner="50" indexofoutput="11" />
                      <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="3" outputowner="17" indexofoutput="4" />
                      <Link inputowner="29" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Squats" id="1" localization="8" tooltip="Enter description here" x="1192" y="435">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Apply Posture_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="59.4604">
                      <Box name="Animated Say" id="4" localization="8" tooltip="Well Done! 5 squat repetitions complete!" x="1840" y="611">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well Done! 5 squats complete!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (1)" id="3" localization="8" tooltip="Say some text with animations. The text can be localized." x="1178" y="913">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Ok then, keep in time with me." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (2)" id="7" localization="8" tooltip="Say some text with animations. The text can be localized." x="610" y="1228">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Stand width your feet shoulder-witdth apart" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (3)" id="25" localization="8" tooltip="Say some text with animations. The text can be localized." x="750" y="1234">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Engage your core and keep your chest up" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (4)" id="26" localization="8" tooltip="Say some text with animations. The text can be localized." x="886" y="1234">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Lower your hips by bending your knees and pushing your hips back, as if you are sitting on a chair." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (5)" id="27" localization="8" tooltip="Say some text with animations. The text can be localized." x="1018" y="1236">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Keep your knees in line with your toes and lower yourself until your thighs are parallel to the ground.&#x0A;" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (6)" id="28" localization="8" tooltip="Say some text with animations. The text can be localized." x="1164" y="1243">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Push through your heels and straighten your legs to return to standing position.&#x0A;" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit" id="6" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="946" y="404">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Stand with your feet shoulder-width apart.\nEngage your core and keep your chest up.\nLower your hips by bending your knees and pushing your hips back, as if you are sitting on a chair.\nKeep your knees in line with your toes and lower yourself until your thighs are parallel to the ground.\nPush through your heels and straighten your legs to return to standing position.")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Stand with your feet shoulder-width apart.
Engage your core and keep your chest up.
Lower your hips by bending your knees and pushing your hips back, as if you are sitting on a chair.
Keep your knees in line with your toes and lower yourself until your thighs are parallel to the ground.
Push through your heels and straighten your legs to return to standing position.]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text" id="24" localization="8" tooltip="Say the text received on its input." x="1037" y="405">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Stand Up (1)" id="29" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="428" y="436">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (7)" id="30" localization="8" tooltip="Say some text with animations. The text can be localized." x="584" y="464">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I am going to explain how to do some squats. Listen to these instructions and then follow my lead." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Stand Up (2)" id="31" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="2136" y="362">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say Text (1)" id="32" localization="8" tooltip="Say the text received on its input." x="1473" y="398">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Apply Posture (9)" id="33" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="698" y="116">
                        <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay (9)" id="34" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="826" y="194">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Apply Posture (10)" id="35" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="961" y="129">
                        <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay (10)" id="36" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1107" y="173">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Apply Posture (11)" id="37" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="1254" y="134">
                        <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay (11)" id="38" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1397" y="163">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Apply Posture (12)" id="39" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="1532" y="98">
                        <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Squat Repitions" id="40" localization="8" tooltip="Enter description here" x="1629" y="964">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="Apply Posture_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                        <Output name="StandUp_success" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Apply Posture" id="8" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="505" y="343">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="633" y="421">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Apply Posture (1)" id="9" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="768" y="356">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay (1)" id="10" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="914" y="400">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Apply Posture (2)" id="11" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="1061" y="361">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay (2)" id="12" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1204" y="390">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Apply Posture (3)" id="13" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="1339" y="325">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay (3)" id="15" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1485" y="369">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Apply Posture (4)" id="16" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="526" y="602">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay (4)" id="17" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="654" y="680">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Apply Posture (5)" id="18" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="789" y="615">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay (5)" id="19" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="935" y="659">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Apply Posture (6)" id="20" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="1082" y="620">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay (6)" id="21" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1225" y="649">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Apply Posture (7)" id="22" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="1360" y="584">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay (7)" id="23" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1506" y="628">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Apply Posture (8)" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="1663" y="529">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay (8)" id="2" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1821" y="575">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Stand Up" id="5" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1906" y="445">
                                  <bitmap>media/images/box/movement/stand.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="StandUpBehavior">
                                      <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                          <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                              <Choice value="Crouch" />
                                              <Choice value="LyingBack" />
                                              <Choice value="LyingBelly" />
                                              <Choice value="Sit" />
                                              <Choice value="SitRelax" />
                                              <Choice value="StandInit" />
                                              <Choice value="Stand" />
                                              <Choice value="StandZero" />
                                            </Parameter>
                                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                            <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                            <Resource name="All motors" type="Lock" timeout="0" />
                                            <Resource name="Stiffness" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="4" />
                                <Link inputowner="9" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                                <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                <Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                <Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="4" />
                                <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                <Link inputowner="18" indexofinput="2" outputowner="17" indexofoutput="4" />
                                <Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="4" />
                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="4" />
                                <Link inputowner="22" indexofinput="2" outputowner="21" indexofoutput="4" />
                                <Link inputowner="23" indexofinput="2" outputowner="22" indexofoutput="4" />
                                <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="4" />
                                <Link inputowner="16" indexofinput="2" outputowner="15" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="23" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="3" outputowner="5" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Comment" id="1" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1556" y="817">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("5 Repitions of the exercise")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[5 Repitions of the exercise]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (1)" id="2" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="849" y="1114">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Currently unused")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Currently unused]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (2)" id="5" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1022" y="39">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Demonstration whilst explaining")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Demonstration whilst explaining]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (3)" id="8" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1224" y="472">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Verbal Explanation")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Verbal Explanation]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Stand Up" id="9" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1423" y="912">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="4" indexofinput="2" outputowner="40" indexofoutput="3" />
                      <Link inputowner="25" indexofinput="2" outputowner="7" indexofoutput="4" />
                      <Link inputowner="26" indexofinput="2" outputowner="25" indexofoutput="4" />
                      <Link inputowner="27" indexofinput="2" outputowner="26" indexofoutput="4" />
                      <Link inputowner="28" indexofinput="2" outputowner="27" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="28" indexofoutput="4" />
                      <Link inputowner="30" indexofinput="2" outputowner="29" indexofoutput="4" />
                      <Link inputowner="31" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="3" outputowner="31" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="30" indexofoutput="4" />
                      <Link inputowner="32" indexofinput="2" outputowner="6" indexofoutput="3" />
                      <Link inputowner="34" indexofinput="2" outputowner="33" indexofoutput="4" />
                      <Link inputowner="35" indexofinput="2" outputowner="34" indexofoutput="4" />
                      <Link inputowner="36" indexofinput="2" outputowner="35" indexofoutput="4" />
                      <Link inputowner="38" indexofinput="2" outputowner="37" indexofoutput="4" />
                      <Link inputowner="39" indexofinput="2" outputowner="38" indexofoutput="4" />
                      <Link inputowner="37" indexofinput="2" outputowner="36" indexofoutput="4" />
                      <Link inputowner="33" indexofinput="2" outputowner="30" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="32" indexofoutput="4" />
                      <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="40" indexofinput="2" outputowner="9" indexofoutput="4" />
                      <Link inputowner="40" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="40" indexofinput="2" outputowner="9" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Lat Raises" id="17" localization="8" tooltip="Enter description here" x="1013" y="438">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
              <Output name="AnimatedSay_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Stand Up" id="3" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="937" y="618">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Timeline" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1067" y="511">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="200" size="200">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Lateral Raises" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="438" y="259">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="LateralRaises" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="20" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-24.4145" />
                              <Key frame="98" value="-24.5265" />
                              <Key frame="200" value="-25.6105" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-68.7512" />
                              <Key frame="98" value="-68.7917" />
                              <Key frame="200" value="-69.3817" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="81.8016" />
                              <Key frame="200" value="76.3742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="12.3654" />
                              <Key frame="98" value="75.5205" />
                              <Key frame="200" value="-6.24787" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.92196" />
                              <Key frame="98" value="5.73789" />
                              <Key frame="200" value="6.0465" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.4145" />
                              <Key frame="98" value="24.5303" />
                              <Key frame="200" value="26.1756" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.7512" />
                              <Key frame="98" value="68.7958" />
                              <Key frame="200" value="69.363" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="82.0576" />
                              <Key frame="200" value="76.3982" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.3654" />
                              <Key frame="98" value="-75.5205" />
                              <Key frame="200" value="6.24225" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.70849" />
                              <Key frame="98" value="5.45315" />
                              <Key frame="200" value="5.60068" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (1)" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1201" y="619">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="200" size="200">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Lateral Raises" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="438" y="259">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="LateralRaises" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="20" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-24.4145" />
                              <Key frame="98" value="-24.5265" />
                              <Key frame="200" value="-25.6105" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-68.7512" />
                              <Key frame="98" value="-68.7917" />
                              <Key frame="200" value="-69.3817" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="81.8016" />
                              <Key frame="200" value="76.3742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="12.3654" />
                              <Key frame="98" value="75.5205" />
                              <Key frame="200" value="-6.24787" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.92196" />
                              <Key frame="98" value="5.73789" />
                              <Key frame="200" value="6.0465" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.4145" />
                              <Key frame="98" value="24.5303" />
                              <Key frame="200" value="26.1756" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.7512" />
                              <Key frame="98" value="68.7958" />
                              <Key frame="200" value="69.363" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="82.0576" />
                              <Key frame="200" value="76.3982" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.3654" />
                              <Key frame="98" value="-75.5205" />
                              <Key frame="200" value="6.24225" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.70849" />
                              <Key frame="98" value="5.45315" />
                              <Key frame="200" value="5.60068" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (2)" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1301" y="504">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="200" size="200">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Lateral Raises" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="438" y="259">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="LateralRaises" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="20" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-24.4145" />
                              <Key frame="98" value="-24.5265" />
                              <Key frame="200" value="-25.6105" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-68.7512" />
                              <Key frame="98" value="-68.7917" />
                              <Key frame="200" value="-69.3817" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="81.8016" />
                              <Key frame="200" value="76.3742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="12.3654" />
                              <Key frame="98" value="75.5205" />
                              <Key frame="200" value="-6.24787" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.92196" />
                              <Key frame="98" value="5.73789" />
                              <Key frame="200" value="6.0465" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.4145" />
                              <Key frame="98" value="24.5303" />
                              <Key frame="200" value="26.1756" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.7512" />
                              <Key frame="98" value="68.7958" />
                              <Key frame="200" value="69.363" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="82.0576" />
                              <Key frame="200" value="76.3982" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.3654" />
                              <Key frame="98" value="-75.5205" />
                              <Key frame="200" value="6.24225" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.70849" />
                              <Key frame="98" value="5.45315" />
                              <Key frame="200" value="5.60068" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (3)" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1392" y="629">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="200" size="200">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Lateral Raises" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="438" y="259">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="LateralRaises" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="20" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-24.4145" />
                              <Key frame="98" value="-24.5265" />
                              <Key frame="200" value="-25.6105" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-68.7512" />
                              <Key frame="98" value="-68.7917" />
                              <Key frame="200" value="-69.3817" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="81.8016" />
                              <Key frame="200" value="76.3742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="12.3654" />
                              <Key frame="98" value="75.5205" />
                              <Key frame="200" value="-6.24787" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.92196" />
                              <Key frame="98" value="5.73789" />
                              <Key frame="200" value="6.0465" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.4145" />
                              <Key frame="98" value="24.5303" />
                              <Key frame="200" value="26.1756" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.7512" />
                              <Key frame="98" value="68.7958" />
                              <Key frame="200" value="69.363" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="82.0576" />
                              <Key frame="200" value="76.3982" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.3654" />
                              <Key frame="98" value="-75.5205" />
                              <Key frame="200" value="6.24225" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.70849" />
                              <Key frame="98" value="5.45315" />
                              <Key frame="200" value="5.60068" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (4)" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1488" y="516">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="200" size="200">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Lateral Raises" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="438" y="259">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="LateralRaises" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="20" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-24.4145" />
                              <Key frame="98" value="-24.5265" />
                              <Key frame="200" value="-25.6105" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-68.7512" />
                              <Key frame="98" value="-68.7917" />
                              <Key frame="200" value="-69.3817" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="81.8016" />
                              <Key frame="200" value="76.3742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="12.3654" />
                              <Key frame="98" value="75.5205" />
                              <Key frame="200" value="-6.24787" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.92196" />
                              <Key frame="98" value="5.73789" />
                              <Key frame="200" value="6.0465" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.4145" />
                              <Key frame="98" value="24.5303" />
                              <Key frame="200" value="26.1756" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.7512" />
                              <Key frame="98" value="68.7958" />
                              <Key frame="200" value="69.363" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="82.0576" />
                              <Key frame="200" value="76.3982" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.3654" />
                              <Key frame="98" value="-75.5205" />
                              <Key frame="200" value="6.24225" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.70849" />
                              <Key frame="98" value="5.45315" />
                              <Key frame="200" value="5.60068" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="226" y="664">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Stand with your feet shoulder-width apart and hold your arms at your sides.\nEngage your core and keep your chest up.\nLift your arms out to the sides, keeping your arms straight and your palms facing down.\nLift your arms up until they are at shoulder height, or slightly above.\nHold the position for a second, then slowly lower your arms back to your sides.")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Stand with your feet shoulder-width apart and hold your arms at your sides.
Engage your core and keep your chest up.
Lift your arms out to the sides, keeping your arms straight and your palms facing down.
Lift your arms up until they are at shoulder height, or slightly above.
Hold the position for a second, then slowly lower your arms back to your sides.]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text" id="10" localization="8" tooltip="Say the text received on its input." x="531" y="728">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Timeline (5)" id="11" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1585" y="641">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="200" size="200">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Lateral Raises" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="438" y="259">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="LateralRaises" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="20" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-24.4145" />
                              <Key frame="98" value="-24.5265" />
                              <Key frame="200" value="-25.6105" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-68.7512" />
                              <Key frame="98" value="-68.7917" />
                              <Key frame="200" value="-69.3817" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="81.8016" />
                              <Key frame="200" value="76.3742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="12.3654" />
                              <Key frame="98" value="75.5205" />
                              <Key frame="200" value="-6.24787" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.92196" />
                              <Key frame="98" value="5.73789" />
                              <Key frame="200" value="6.0465" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.4145" />
                              <Key frame="98" value="24.5303" />
                              <Key frame="200" value="26.1756" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.7512" />
                              <Key frame="98" value="68.7958" />
                              <Key frame="200" value="69.363" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="82.0576" />
                              <Key frame="200" value="76.3982" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.3654" />
                              <Key frame="98" value="-75.5205" />
                              <Key frame="200" value="6.24225" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.70849" />
                              <Key frame="98" value="5.45315" />
                              <Key frame="200" value="5.60068" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Animated Say" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1541" y="11">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well done! Five repetitions done! Good job!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (1)" id="13" localization="8" tooltip="Say some text with animations. The text can be localized." x="84" y="1010">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Stand with your feet shoulder-width apart and hold your arms at your sides." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (2)" id="25" localization="8" tooltip="Say some text with animations. The text can be localized." x="224" y="1016">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Engage your core and keep your chest up." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (3)" id="26" localization="8" tooltip="Say some text with animations. The text can be localized." x="360" y="1016">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Lift your arms out to the sides, keeping your arms straight and your palms facing down." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (4)" id="27" localization="8" tooltip="Say some text with animations. The text can be localized." x="492" y="1018">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Lift your arms up until they are at shoulder height, or slightly above." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (5)" id="28" localization="8" tooltip="Say some text with animations. The text can be localized." x="638" y="1025">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Hold the position for a second, then slowly lower your arms back to your sides." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (6)" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="124" y="481">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="You can do this exercise with or without light dumbells depending on how strong you feel." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (7)" id="15" localization="8" tooltip="Say some text with animations. The text can be localized." x="124" y="351">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I am going to explain how to do some arm raises. Listen to these instructions and then follow my lead." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Stand Up (1)" id="16" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="103" y="210">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Stand Up (2)" id="18" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="803" y="1023">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (1)" id="19" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1023" y="1062">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Ready. Steady. Go!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Ready. Steady. Go!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (1)" id="20" localization="8" tooltip="Say the text received on its input." x="1310" y="1048">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Timeline (6)" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="384" y="118">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="200" size="200">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Lateral Raises" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="438" y="259">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="LateralRaises" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="20" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-24.4145" />
                              <Key frame="98" value="-24.5265" />
                              <Key frame="200" value="-25.6105" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-68.7512" />
                              <Key frame="98" value="-68.7917" />
                              <Key frame="200" value="-69.3817" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="81.8016" />
                              <Key frame="200" value="76.3742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="12.3654" />
                              <Key frame="98" value="75.5205" />
                              <Key frame="200" value="-6.24787" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.92196" />
                              <Key frame="98" value="5.73789" />
                              <Key frame="200" value="6.0465" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.4145" />
                              <Key frame="98" value="24.5303" />
                              <Key frame="200" value="26.1756" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.7512" />
                              <Key frame="98" value="68.7958" />
                              <Key frame="200" value="69.363" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="82.0576" />
                              <Key frame="200" value="76.3982" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.3654" />
                              <Key frame="98" value="-75.5205" />
                              <Key frame="200" value="6.24225" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.70849" />
                              <Key frame="98" value="5.45315" />
                              <Key frame="200" value="5.60068" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (7)" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="518" y="226">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="200" size="200">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Lateral Raises" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="438" y="259">
                                  <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="LateralRaises" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="20" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-24.4145" />
                              <Key frame="98" value="-24.5265" />
                              <Key frame="200" value="-25.6105" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-68.7512" />
                              <Key frame="98" value="-68.7917" />
                              <Key frame="200" value="-69.3817" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="81.8016" />
                              <Key frame="200" value="76.3742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="12.3654" />
                              <Key frame="98" value="75.5205" />
                              <Key frame="200" value="-6.24787" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.92196" />
                              <Key frame="98" value="5.73789" />
                              <Key frame="200" value="6.0465" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.4145" />
                              <Key frame="98" value="24.5303" />
                              <Key frame="200" value="26.1756" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.7512" />
                              <Key frame="98" value="68.7958" />
                              <Key frame="200" value="69.363" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.296292" />
                              <Key frame="98" value="0.293013" />
                              <Key frame="200" value="0.293013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.3767" />
                              <Key frame="98" value="82.0576" />
                              <Key frame="200" value="76.3982" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.3654" />
                              <Key frame="98" value="-75.5205" />
                              <Key frame="200" value="6.24225" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.70849" />
                              <Key frame="98" value="5.45315" />
                              <Key frame="200" value="5.60068" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Comment" id="21" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="433" y="14">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Demonstration whilst talking")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Demonstration whilst talking]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (1)" id="22" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="366" y="1130">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Currently unused instructions ")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Currently unused instructions ]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (2)" id="23" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="374" y="540">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Verbal instructions whilst the demo is running")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Verbal instructions whilst the demo is running]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (3)" id="24" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1142" y="389">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("5 Reps of the exercise")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[5 Reps of the exercise]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                      <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                      <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="3" />
                      <Link inputowner="11" indexofinput="2" outputowner="8" indexofoutput="4" />
                      <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                      <Link inputowner="25" indexofinput="2" outputowner="13" indexofoutput="4" />
                      <Link inputowner="26" indexofinput="2" outputowner="25" indexofoutput="4" />
                      <Link inputowner="27" indexofinput="2" outputowner="26" indexofoutput="4" />
                      <Link inputowner="28" indexofinput="2" outputowner="27" indexofoutput="4" />
                      <Link inputowner="14" indexofinput="2" outputowner="15" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="4" />
                      <Link inputowner="18" indexofinput="2" outputowner="28" indexofoutput="4" />
                      <Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="4" />
                      <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="3" />
                      <Link inputowner="3" indexofinput="2" outputowner="20" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="3" outputowner="12" indexofoutput="4" />
                      <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="14" indexofoutput="4" />
                      <Link inputowner="9" indexofinput="2" outputowner="14" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Arm Twists" id="2" localization="8" tooltip="Enter description here" x="636" y="426">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Green_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="Timeline5_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Timeline (1)" id="15" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="899" y="319">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="150">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="1" value="-11.1647" />
                              <Key frame="50" value="-11.1647" />
                              <Key frame="100" value="-11.1647" />
                              <Key frame="150" value="-11.1647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="1" value="0.173378" />
                              <Key frame="50" value="0.173378" />
                              <Key frame="100" value="0.173378" />
                              <Key frame="150" value="0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.13332" />
                              <Key frame="50" value="-4.13332" />
                              <Key frame="100" value="-4.13332" />
                              <Key frame="150" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.78677" />
                              <Key frame="50" value="-8.78677" />
                              <Key frame="100" value="-8.78677" />
                              <Key frame="150" value="-8.78677" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-33.3965" />
                              <Key frame="50" value="-33.3965" />
                              <Key frame="100" value="-33.3965" />
                              <Key frame="150" value="-32.166" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-99.6716" />
                              <Key frame="50" value="-99.6716" />
                              <Key frame="100" value="-99.6716" />
                              <Key frame="150" value="-99.0564" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.9636" />
                              <Key frame="50" value="0.9636" />
                              <Key frame="100" value="0.9636" />
                              <Key frame="150" value="0.9636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.07861" />
                              <Key frame="50" value="3.07861" />
                              <Key frame="100" value="3.07861" />
                              <Key frame="150" value="3.07861" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="9.14314" />
                              <Key frame="50" value="9.14314" />
                              <Key frame="100" value="9.14314" />
                              <Key frame="150" value="9.14314" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="9.31412" />
                              <Key frame="50" value="9.31412" />
                              <Key frame="100" value="9.31412" />
                              <Key frame="150" value="9.31412" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.5863" />
                              <Key frame="50" value="67.5863" />
                              <Key frame="100" value="67.5863" />
                              <Key frame="150" value="66.3559" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="73.2114" />
                              <Key frame="50" value="73.2114" />
                              <Key frame="100" value="73.2114" />
                              <Key frame="150" value="70.311" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="13.9724" />
                              <Key frame="50" value="-103.363" />
                              <Key frame="100" value="104.5" />
                              <Key frame="150" value="103.182" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-7.02893" />
                              <Key frame="50" value="-7.02893" />
                              <Key frame="100" value="-7.02893" />
                              <Key frame="150" value="-7.02893" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-3.86484" />
                              <Key frame="50" value="-3.86484" />
                              <Key frame="100" value="-3.86484" />
                              <Key frame="150" value="-3.86484" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="33.4892" />
                              <Key frame="50" value="33.4892" />
                              <Key frame="100" value="33.4892" />
                              <Key frame="150" value="32.2587" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="100.282" />
                              <Key frame="50" value="100.282" />
                              <Key frame="100" value="100.282" />
                              <Key frame="150" value="100.282" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.9816" />
                              <Key frame="50" value="0.9816" />
                              <Key frame="100" value="0.9816" />
                              <Key frame="150" value="0.9816" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.42537" />
                              <Key frame="50" value="3.42537" />
                              <Key frame="100" value="3.42537" />
                              <Key frame="150" value="3.42537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="50" value="6.85796" />
                              <Key frame="100" value="6.85796" />
                              <Key frame="150" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="12.3073" />
                              <Key frame="50" value="12.3073" />
                              <Key frame="100" value="12.3073" />
                              <Key frame="150" value="12.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.2396" />
                              <Key frame="50" value="67.2396" />
                              <Key frame="100" value="67.2396" />
                              <Key frame="150" value="65.8333" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-72.8646" />
                              <Key frame="50" value="-72.8646" />
                              <Key frame="100" value="-72.8646" />
                              <Key frame="150" value="-69.9642" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-14.4166" />
                              <Key frame="50" value="102.919" />
                              <Key frame="100" value="-104.5" />
                              <Key frame="150" value="-103.275" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (2)" id="16" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1062" y="322">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="150">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="1" value="-11.1647" />
                              <Key frame="50" value="-11.1647" />
                              <Key frame="100" value="-11.1647" />
                              <Key frame="150" value="-11.1647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="1" value="0.173378" />
                              <Key frame="50" value="0.173378" />
                              <Key frame="100" value="0.173378" />
                              <Key frame="150" value="0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.13332" />
                              <Key frame="50" value="-4.13332" />
                              <Key frame="100" value="-4.13332" />
                              <Key frame="150" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.78677" />
                              <Key frame="50" value="-8.78677" />
                              <Key frame="100" value="-8.78677" />
                              <Key frame="150" value="-8.78677" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-33.3965" />
                              <Key frame="50" value="-33.3965" />
                              <Key frame="100" value="-33.3965" />
                              <Key frame="150" value="-32.166" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-99.6716" />
                              <Key frame="50" value="-99.6716" />
                              <Key frame="100" value="-99.6716" />
                              <Key frame="150" value="-99.0564" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.9636" />
                              <Key frame="50" value="0.9636" />
                              <Key frame="100" value="0.9636" />
                              <Key frame="150" value="0.9636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.07861" />
                              <Key frame="50" value="3.07861" />
                              <Key frame="100" value="3.07861" />
                              <Key frame="150" value="3.07861" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="9.14314" />
                              <Key frame="50" value="9.14314" />
                              <Key frame="100" value="9.14314" />
                              <Key frame="150" value="9.14314" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="9.31412" />
                              <Key frame="50" value="9.31412" />
                              <Key frame="100" value="9.31412" />
                              <Key frame="150" value="9.31412" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.5863" />
                              <Key frame="50" value="67.5863" />
                              <Key frame="100" value="67.5863" />
                              <Key frame="150" value="66.3559" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="73.2114" />
                              <Key frame="50" value="73.2114" />
                              <Key frame="100" value="73.2114" />
                              <Key frame="150" value="70.311" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="13.9724" />
                              <Key frame="50" value="-103.363" />
                              <Key frame="100" value="104.5" />
                              <Key frame="150" value="103.182" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-7.02893" />
                              <Key frame="50" value="-7.02893" />
                              <Key frame="100" value="-7.02893" />
                              <Key frame="150" value="-7.02893" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-3.86484" />
                              <Key frame="50" value="-3.86484" />
                              <Key frame="100" value="-3.86484" />
                              <Key frame="150" value="-3.86484" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="33.4892" />
                              <Key frame="50" value="33.4892" />
                              <Key frame="100" value="33.4892" />
                              <Key frame="150" value="32.2587" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="100.282" />
                              <Key frame="50" value="100.282" />
                              <Key frame="100" value="100.282" />
                              <Key frame="150" value="100.282" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.9816" />
                              <Key frame="50" value="0.9816" />
                              <Key frame="100" value="0.9816" />
                              <Key frame="150" value="0.9816" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.42537" />
                              <Key frame="50" value="3.42537" />
                              <Key frame="100" value="3.42537" />
                              <Key frame="150" value="3.42537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="50" value="6.85796" />
                              <Key frame="100" value="6.85796" />
                              <Key frame="150" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="12.3073" />
                              <Key frame="50" value="12.3073" />
                              <Key frame="100" value="12.3073" />
                              <Key frame="150" value="12.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.2396" />
                              <Key frame="50" value="67.2396" />
                              <Key frame="100" value="67.2396" />
                              <Key frame="150" value="65.8333" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-72.8646" />
                              <Key frame="50" value="-72.8646" />
                              <Key frame="100" value="-72.8646" />
                              <Key frame="150" value="-69.9642" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-14.4166" />
                              <Key frame="50" value="102.919" />
                              <Key frame="100" value="-104.5" />
                              <Key frame="150" value="-103.275" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (3)" id="17" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1275" y="320">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="150">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="1" value="-11.1647" />
                              <Key frame="50" value="-11.1647" />
                              <Key frame="100" value="-11.1647" />
                              <Key frame="150" value="-11.1647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="1" value="0.173378" />
                              <Key frame="50" value="0.173378" />
                              <Key frame="100" value="0.173378" />
                              <Key frame="150" value="0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.13332" />
                              <Key frame="50" value="-4.13332" />
                              <Key frame="100" value="-4.13332" />
                              <Key frame="150" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.78677" />
                              <Key frame="50" value="-8.78677" />
                              <Key frame="100" value="-8.78677" />
                              <Key frame="150" value="-8.78677" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-33.3965" />
                              <Key frame="50" value="-33.3965" />
                              <Key frame="100" value="-33.3965" />
                              <Key frame="150" value="-32.166" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-99.6716" />
                              <Key frame="50" value="-99.6716" />
                              <Key frame="100" value="-99.6716" />
                              <Key frame="150" value="-99.0564" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.9636" />
                              <Key frame="50" value="0.9636" />
                              <Key frame="100" value="0.9636" />
                              <Key frame="150" value="0.9636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.07861" />
                              <Key frame="50" value="3.07861" />
                              <Key frame="100" value="3.07861" />
                              <Key frame="150" value="3.07861" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="9.14314" />
                              <Key frame="50" value="9.14314" />
                              <Key frame="100" value="9.14314" />
                              <Key frame="150" value="9.14314" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="9.31412" />
                              <Key frame="50" value="9.31412" />
                              <Key frame="100" value="9.31412" />
                              <Key frame="150" value="9.31412" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.5863" />
                              <Key frame="50" value="67.5863" />
                              <Key frame="100" value="67.5863" />
                              <Key frame="150" value="66.3559" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="73.2114" />
                              <Key frame="50" value="73.2114" />
                              <Key frame="100" value="73.2114" />
                              <Key frame="150" value="70.311" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="13.9724" />
                              <Key frame="50" value="-103.363" />
                              <Key frame="100" value="104.5" />
                              <Key frame="150" value="103.182" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-7.02893" />
                              <Key frame="50" value="-7.02893" />
                              <Key frame="100" value="-7.02893" />
                              <Key frame="150" value="-7.02893" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-3.86484" />
                              <Key frame="50" value="-3.86484" />
                              <Key frame="100" value="-3.86484" />
                              <Key frame="150" value="-3.86484" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="33.4892" />
                              <Key frame="50" value="33.4892" />
                              <Key frame="100" value="33.4892" />
                              <Key frame="150" value="32.2587" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="100.282" />
                              <Key frame="50" value="100.282" />
                              <Key frame="100" value="100.282" />
                              <Key frame="150" value="100.282" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.9816" />
                              <Key frame="50" value="0.9816" />
                              <Key frame="100" value="0.9816" />
                              <Key frame="150" value="0.9816" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.42537" />
                              <Key frame="50" value="3.42537" />
                              <Key frame="100" value="3.42537" />
                              <Key frame="150" value="3.42537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="50" value="6.85796" />
                              <Key frame="100" value="6.85796" />
                              <Key frame="150" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="12.3073" />
                              <Key frame="50" value="12.3073" />
                              <Key frame="100" value="12.3073" />
                              <Key frame="150" value="12.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.2396" />
                              <Key frame="50" value="67.2396" />
                              <Key frame="100" value="67.2396" />
                              <Key frame="150" value="65.8333" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-72.8646" />
                              <Key frame="50" value="-72.8646" />
                              <Key frame="100" value="-72.8646" />
                              <Key frame="150" value="-69.9642" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-14.4166" />
                              <Key frame="50" value="102.919" />
                              <Key frame="100" value="-104.5" />
                              <Key frame="150" value="-103.275" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (4)" id="18" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1484" y="322">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="150">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="1" value="-11.1647" />
                              <Key frame="50" value="-11.1647" />
                              <Key frame="100" value="-11.1647" />
                              <Key frame="150" value="-11.1647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="1" value="0.173378" />
                              <Key frame="50" value="0.173378" />
                              <Key frame="100" value="0.173378" />
                              <Key frame="150" value="0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.13332" />
                              <Key frame="50" value="-4.13332" />
                              <Key frame="100" value="-4.13332" />
                              <Key frame="150" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.78677" />
                              <Key frame="50" value="-8.78677" />
                              <Key frame="100" value="-8.78677" />
                              <Key frame="150" value="-8.78677" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-33.3965" />
                              <Key frame="50" value="-33.3965" />
                              <Key frame="100" value="-33.3965" />
                              <Key frame="150" value="-32.166" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-99.6716" />
                              <Key frame="50" value="-99.6716" />
                              <Key frame="100" value="-99.6716" />
                              <Key frame="150" value="-99.0564" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.9636" />
                              <Key frame="50" value="0.9636" />
                              <Key frame="100" value="0.9636" />
                              <Key frame="150" value="0.9636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.07861" />
                              <Key frame="50" value="3.07861" />
                              <Key frame="100" value="3.07861" />
                              <Key frame="150" value="3.07861" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="9.14314" />
                              <Key frame="50" value="9.14314" />
                              <Key frame="100" value="9.14314" />
                              <Key frame="150" value="9.14314" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="9.31412" />
                              <Key frame="50" value="9.31412" />
                              <Key frame="100" value="9.31412" />
                              <Key frame="150" value="9.31412" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.5863" />
                              <Key frame="50" value="67.5863" />
                              <Key frame="100" value="67.5863" />
                              <Key frame="150" value="66.3559" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="73.2114" />
                              <Key frame="50" value="73.2114" />
                              <Key frame="100" value="73.2114" />
                              <Key frame="150" value="70.311" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="13.9724" />
                              <Key frame="50" value="-103.363" />
                              <Key frame="100" value="104.5" />
                              <Key frame="150" value="103.182" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-7.02893" />
                              <Key frame="50" value="-7.02893" />
                              <Key frame="100" value="-7.02893" />
                              <Key frame="150" value="-7.02893" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-3.86484" />
                              <Key frame="50" value="-3.86484" />
                              <Key frame="100" value="-3.86484" />
                              <Key frame="150" value="-3.86484" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="33.4892" />
                              <Key frame="50" value="33.4892" />
                              <Key frame="100" value="33.4892" />
                              <Key frame="150" value="32.2587" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="100.282" />
                              <Key frame="50" value="100.282" />
                              <Key frame="100" value="100.282" />
                              <Key frame="150" value="100.282" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.9816" />
                              <Key frame="50" value="0.9816" />
                              <Key frame="100" value="0.9816" />
                              <Key frame="150" value="0.9816" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.42537" />
                              <Key frame="50" value="3.42537" />
                              <Key frame="100" value="3.42537" />
                              <Key frame="150" value="3.42537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="50" value="6.85796" />
                              <Key frame="100" value="6.85796" />
                              <Key frame="150" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="12.3073" />
                              <Key frame="50" value="12.3073" />
                              <Key frame="100" value="12.3073" />
                              <Key frame="150" value="12.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.2396" />
                              <Key frame="50" value="67.2396" />
                              <Key frame="100" value="67.2396" />
                              <Key frame="150" value="65.8333" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-72.8646" />
                              <Key frame="50" value="-72.8646" />
                              <Key frame="100" value="-72.8646" />
                              <Key frame="150" value="-69.9642" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-14.4166" />
                              <Key frame="50" value="102.919" />
                              <Key frame="100" value="-104.5" />
                              <Key frame="150" value="-103.275" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (5)" id="19" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1671" y="309">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="150">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="1" value="-11.1647" />
                              <Key frame="50" value="-11.1647" />
                              <Key frame="100" value="-11.1647" />
                              <Key frame="150" value="-11.1647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="1" value="0.173378" />
                              <Key frame="50" value="0.173378" />
                              <Key frame="100" value="0.173378" />
                              <Key frame="150" value="0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.13332" />
                              <Key frame="50" value="-4.13332" />
                              <Key frame="100" value="-4.13332" />
                              <Key frame="150" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.78677" />
                              <Key frame="50" value="-8.78677" />
                              <Key frame="100" value="-8.78677" />
                              <Key frame="150" value="-8.78677" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-33.3965" />
                              <Key frame="50" value="-33.3965" />
                              <Key frame="100" value="-33.3965" />
                              <Key frame="150" value="-32.166" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-99.6716" />
                              <Key frame="50" value="-99.6716" />
                              <Key frame="100" value="-99.6716" />
                              <Key frame="150" value="-99.0564" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.9636" />
                              <Key frame="50" value="0.9636" />
                              <Key frame="100" value="0.9636" />
                              <Key frame="150" value="0.9636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.07861" />
                              <Key frame="50" value="3.07861" />
                              <Key frame="100" value="3.07861" />
                              <Key frame="150" value="3.07861" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="9.14314" />
                              <Key frame="50" value="9.14314" />
                              <Key frame="100" value="9.14314" />
                              <Key frame="150" value="9.14314" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="9.31412" />
                              <Key frame="50" value="9.31412" />
                              <Key frame="100" value="9.31412" />
                              <Key frame="150" value="9.31412" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.5863" />
                              <Key frame="50" value="67.5863" />
                              <Key frame="100" value="67.5863" />
                              <Key frame="150" value="66.3559" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="73.2114" />
                              <Key frame="50" value="73.2114" />
                              <Key frame="100" value="73.2114" />
                              <Key frame="150" value="70.311" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="13.9724" />
                              <Key frame="50" value="-103.363" />
                              <Key frame="100" value="104.5" />
                              <Key frame="150" value="103.182" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-7.02893" />
                              <Key frame="50" value="-7.02893" />
                              <Key frame="100" value="-7.02893" />
                              <Key frame="150" value="-7.02893" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-3.86484" />
                              <Key frame="50" value="-3.86484" />
                              <Key frame="100" value="-3.86484" />
                              <Key frame="150" value="-3.86484" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="33.4892" />
                              <Key frame="50" value="33.4892" />
                              <Key frame="100" value="33.4892" />
                              <Key frame="150" value="32.2587" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="100.282" />
                              <Key frame="50" value="100.282" />
                              <Key frame="100" value="100.282" />
                              <Key frame="150" value="100.282" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.9816" />
                              <Key frame="50" value="0.9816" />
                              <Key frame="100" value="0.9816" />
                              <Key frame="150" value="0.9816" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.42537" />
                              <Key frame="50" value="3.42537" />
                              <Key frame="100" value="3.42537" />
                              <Key frame="150" value="3.42537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="50" value="6.85796" />
                              <Key frame="100" value="6.85796" />
                              <Key frame="150" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="12.3073" />
                              <Key frame="50" value="12.3073" />
                              <Key frame="100" value="12.3073" />
                              <Key frame="150" value="12.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.2396" />
                              <Key frame="50" value="67.2396" />
                              <Key frame="100" value="67.2396" />
                              <Key frame="150" value="65.8333" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-72.8646" />
                              <Key frame="50" value="-72.8646" />
                              <Key frame="100" value="-72.8646" />
                              <Key frame="150" value="-69.9642" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-14.4166" />
                              <Key frame="50" value="102.919" />
                              <Key frame="100" value="-104.5" />
                              <Key frame="150" value="-103.275" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Text Edit (6)" id="6" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="217" y="659">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Stand with your feet shoulder-width apart and extend your arms straight out in front of you, parallel to the ground.\nEngage your core and keep your chest up.\nWithout bending your elbows, twist your hands all the way forward as far as you can go.\nPause for a moment, then twist your arms in the reverse direction as far as you can go. \nRepeat this motion and keep in time with me! \n")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Stand with your feet shoulder-width apart and extend your arms straight out in front of you, parallel to the ground.
Engage your core and keep your chest up.
Without bending your elbows, twist your hands all the way forward as far as you can go.
Pause for a moment, then twist your arms in the reverse direction as far as you can go. 
Repeat this motion and keep in time with me! 
]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (5)" id="20" localization="8" tooltip="Say the text received on its input." x="522" y="723">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="78" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say" id="21" localization="8" tooltip="Say some text with animations. The text can be localized." x="403" y="1151">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Stand with your feet shoulder-width apart and extend your arms straight out to the sides, parallel to the ground." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (1)" id="25" localization="8" tooltip="Say some text with animations. The text can be localized." x="543" y="1157">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Engage your core and keep your chest up." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (2)" id="26" localization="8" tooltip="Say some text with animations. The text can be localized." x="679" y="1157">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Without bending your elbows, twist your hands all the way forward as far as you can go.&#x0A;" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (3)" id="27" localization="8" tooltip="Say some text with animations. The text can be localized." x="811" y="1159">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Pause for a moment, then twist your arms in the reverse direction as far as you can go. &#x0A;" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (4)" id="28" localization="8" tooltip="Say some text with animations. The text can be localized." x="957" y="1166">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Repeat this motion and keep in time with me! &#x0A;" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (6)" id="23" localization="8" tooltip="Say some text with animations. The text can be localized." x="229" y="337">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="63" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I am going to explain how to do some arm raises. Listen to these instructions and then follow my lead." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Stand Up" id="24" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="208" y="196">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Stand Up (1)" id="29" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="956" y="794">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (7)" id="30" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1176" y="833">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Ready. Steady. Go!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Ready. Steady. Go!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (6)" id="31" localization="8" tooltip="Say the text received on its input." x="1463" y="819">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Green" id="34" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="206" y="88">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                          <Choice value="Both" />
                          <Choice value="Left" />
                          <Choice value="Right" />
                        </Parameter>
                        <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                </Box>
                                <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 255, 0])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <color>#00ff00</color>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                  <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                </Box>
                                <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Animated Say (5)" id="1" localization="8" tooltip="Say some text with animations. The text can be localized." x="1741" y="156">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well Done!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Timeline" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="438" y="319">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="150">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="1" value="-11.1647" />
                              <Key frame="50" value="-11.1647" />
                              <Key frame="100" value="-11.1647" />
                              <Key frame="150" value="-11.1647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="1" value="0.173378" />
                              <Key frame="50" value="0.173378" />
                              <Key frame="100" value="0.173378" />
                              <Key frame="150" value="0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.13332" />
                              <Key frame="50" value="-4.13332" />
                              <Key frame="100" value="-4.13332" />
                              <Key frame="150" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.78677" />
                              <Key frame="50" value="-8.78677" />
                              <Key frame="100" value="-8.78677" />
                              <Key frame="150" value="-8.78677" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-33.3965" />
                              <Key frame="50" value="-33.3965" />
                              <Key frame="100" value="-33.3965" />
                              <Key frame="150" value="-32.166" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-99.6716" />
                              <Key frame="50" value="-99.6716" />
                              <Key frame="100" value="-99.6716" />
                              <Key frame="150" value="-99.0564" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.9636" />
                              <Key frame="50" value="0.9636" />
                              <Key frame="100" value="0.9636" />
                              <Key frame="150" value="0.9636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.07861" />
                              <Key frame="50" value="3.07861" />
                              <Key frame="100" value="3.07861" />
                              <Key frame="150" value="3.07861" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="9.14314" />
                              <Key frame="50" value="9.14314" />
                              <Key frame="100" value="9.14314" />
                              <Key frame="150" value="9.14314" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="9.31412" />
                              <Key frame="50" value="9.31412" />
                              <Key frame="100" value="9.31412" />
                              <Key frame="150" value="9.31412" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.5863" />
                              <Key frame="50" value="67.5863" />
                              <Key frame="100" value="67.5863" />
                              <Key frame="150" value="66.3559" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="73.2114" />
                              <Key frame="50" value="73.2114" />
                              <Key frame="100" value="73.2114" />
                              <Key frame="150" value="70.311" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="13.9724" />
                              <Key frame="50" value="-103.363" />
                              <Key frame="100" value="104.5" />
                              <Key frame="150" value="103.182" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-7.02893" />
                              <Key frame="50" value="-7.02893" />
                              <Key frame="100" value="-7.02893" />
                              <Key frame="150" value="-7.02893" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-3.86484" />
                              <Key frame="50" value="-3.86484" />
                              <Key frame="100" value="-3.86484" />
                              <Key frame="150" value="-3.86484" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="33.4892" />
                              <Key frame="50" value="33.4892" />
                              <Key frame="100" value="33.4892" />
                              <Key frame="150" value="32.2587" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="100.282" />
                              <Key frame="50" value="100.282" />
                              <Key frame="100" value="100.282" />
                              <Key frame="150" value="100.282" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.9816" />
                              <Key frame="50" value="0.9816" />
                              <Key frame="100" value="0.9816" />
                              <Key frame="150" value="0.9816" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.42537" />
                              <Key frame="50" value="3.42537" />
                              <Key frame="100" value="3.42537" />
                              <Key frame="150" value="3.42537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="50" value="6.85796" />
                              <Key frame="100" value="6.85796" />
                              <Key frame="150" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="12.3073" />
                              <Key frame="50" value="12.3073" />
                              <Key frame="100" value="12.3073" />
                              <Key frame="150" value="12.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.2396" />
                              <Key frame="50" value="67.2396" />
                              <Key frame="100" value="67.2396" />
                              <Key frame="150" value="65.8333" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-72.8646" />
                              <Key frame="50" value="-72.8646" />
                              <Key frame="100" value="-72.8646" />
                              <Key frame="150" value="-69.9642" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-14.4166" />
                              <Key frame="50" value="102.919" />
                              <Key frame="100" value="-104.5" />
                              <Key frame="150" value="-103.275" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (6)" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="578" y="222">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="150">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="1" value="-11.1647" />
                              <Key frame="50" value="-11.1647" />
                              <Key frame="100" value="-11.1647" />
                              <Key frame="150" value="-11.1647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="1" value="0.173378" />
                              <Key frame="50" value="0.173378" />
                              <Key frame="100" value="0.173378" />
                              <Key frame="150" value="0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.13332" />
                              <Key frame="50" value="-4.13332" />
                              <Key frame="100" value="-4.13332" />
                              <Key frame="150" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.78677" />
                              <Key frame="50" value="-8.78677" />
                              <Key frame="100" value="-8.78677" />
                              <Key frame="150" value="-8.78677" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-33.3965" />
                              <Key frame="50" value="-33.3965" />
                              <Key frame="100" value="-33.3965" />
                              <Key frame="150" value="-32.166" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-99.6716" />
                              <Key frame="50" value="-99.6716" />
                              <Key frame="100" value="-99.6716" />
                              <Key frame="150" value="-99.0564" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.9636" />
                              <Key frame="50" value="0.9636" />
                              <Key frame="100" value="0.9636" />
                              <Key frame="150" value="0.9636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.07861" />
                              <Key frame="50" value="3.07861" />
                              <Key frame="100" value="3.07861" />
                              <Key frame="150" value="3.07861" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="9.14314" />
                              <Key frame="50" value="9.14314" />
                              <Key frame="100" value="9.14314" />
                              <Key frame="150" value="9.14314" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="9.31412" />
                              <Key frame="50" value="9.31412" />
                              <Key frame="100" value="9.31412" />
                              <Key frame="150" value="9.31412" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.5863" />
                              <Key frame="50" value="67.5863" />
                              <Key frame="100" value="67.5863" />
                              <Key frame="150" value="66.3559" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="73.2114" />
                              <Key frame="50" value="73.2114" />
                              <Key frame="100" value="73.2114" />
                              <Key frame="150" value="70.311" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="13.9724" />
                              <Key frame="50" value="-103.363" />
                              <Key frame="100" value="104.5" />
                              <Key frame="150" value="103.182" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-7.02893" />
                              <Key frame="50" value="-7.02893" />
                              <Key frame="100" value="-7.02893" />
                              <Key frame="150" value="-7.02893" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-3.86484" />
                              <Key frame="50" value="-3.86484" />
                              <Key frame="100" value="-3.86484" />
                              <Key frame="150" value="-3.86484" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="33.4892" />
                              <Key frame="50" value="33.4892" />
                              <Key frame="100" value="33.4892" />
                              <Key frame="150" value="32.2587" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="100.282" />
                              <Key frame="50" value="100.282" />
                              <Key frame="100" value="100.282" />
                              <Key frame="150" value="100.282" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.9816" />
                              <Key frame="50" value="0.9816" />
                              <Key frame="100" value="0.9816" />
                              <Key frame="150" value="0.9816" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.42537" />
                              <Key frame="50" value="3.42537" />
                              <Key frame="100" value="3.42537" />
                              <Key frame="150" value="3.42537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="50" value="6.85796" />
                              <Key frame="100" value="6.85796" />
                              <Key frame="150" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="12.3073" />
                              <Key frame="50" value="12.3073" />
                              <Key frame="100" value="12.3073" />
                              <Key frame="150" value="12.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.2396" />
                              <Key frame="50" value="67.2396" />
                              <Key frame="100" value="67.2396" />
                              <Key frame="150" value="65.8333" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-72.8646" />
                              <Key frame="50" value="-72.8646" />
                              <Key frame="100" value="-72.8646" />
                              <Key frame="150" value="-69.9642" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-14.4166" />
                              <Key frame="50" value="102.919" />
                              <Key frame="100" value="-104.5" />
                              <Key frame="150" value="-103.275" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (7)" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="738" y="148">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="150">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="1" value="-11.1647" />
                              <Key frame="50" value="-11.1647" />
                              <Key frame="100" value="-11.1647" />
                              <Key frame="150" value="-11.1647" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="1" value="0.173378" />
                              <Key frame="50" value="0.173378" />
                              <Key frame="100" value="0.173378" />
                              <Key frame="150" value="0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.13332" />
                              <Key frame="50" value="-4.13332" />
                              <Key frame="100" value="-4.13332" />
                              <Key frame="150" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.78677" />
                              <Key frame="50" value="-8.78677" />
                              <Key frame="100" value="-8.78677" />
                              <Key frame="150" value="-8.78677" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-33.3965" />
                              <Key frame="50" value="-33.3965" />
                              <Key frame="100" value="-33.3965" />
                              <Key frame="150" value="-32.166" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-99.6716" />
                              <Key frame="50" value="-99.6716" />
                              <Key frame="100" value="-99.6716" />
                              <Key frame="150" value="-99.0564" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.9636" />
                              <Key frame="50" value="0.9636" />
                              <Key frame="100" value="0.9636" />
                              <Key frame="150" value="0.9636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.07861" />
                              <Key frame="50" value="3.07861" />
                              <Key frame="100" value="3.07861" />
                              <Key frame="150" value="3.07861" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="9.14314" />
                              <Key frame="50" value="9.14314" />
                              <Key frame="100" value="9.14314" />
                              <Key frame="150" value="9.14314" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="9.31412" />
                              <Key frame="50" value="9.31412" />
                              <Key frame="100" value="9.31412" />
                              <Key frame="150" value="9.31412" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.5863" />
                              <Key frame="50" value="67.5863" />
                              <Key frame="100" value="67.5863" />
                              <Key frame="150" value="66.3559" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="73.2114" />
                              <Key frame="50" value="73.2114" />
                              <Key frame="100" value="73.2114" />
                              <Key frame="150" value="70.311" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="13.9724" />
                              <Key frame="50" value="-103.363" />
                              <Key frame="100" value="104.5" />
                              <Key frame="150" value="103.182" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-7.02893" />
                              <Key frame="50" value="-7.02893" />
                              <Key frame="100" value="-7.02893" />
                              <Key frame="150" value="-7.02893" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-3.86484" />
                              <Key frame="50" value="-3.86484" />
                              <Key frame="100" value="-3.86484" />
                              <Key frame="150" value="-3.86484" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="33.4892" />
                              <Key frame="50" value="33.4892" />
                              <Key frame="100" value="33.4892" />
                              <Key frame="150" value="32.2587" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="100.282" />
                              <Key frame="50" value="100.282" />
                              <Key frame="100" value="100.282" />
                              <Key frame="150" value="100.282" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.9816" />
                              <Key frame="50" value="0.9816" />
                              <Key frame="100" value="0.9816" />
                              <Key frame="150" value="0.9816" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.42537" />
                              <Key frame="50" value="3.42537" />
                              <Key frame="100" value="3.42537" />
                              <Key frame="150" value="3.42537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="50" value="6.85796" />
                              <Key frame="100" value="6.85796" />
                              <Key frame="150" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.3688" />
                              <Key frame="50" value="-10.3688" />
                              <Key frame="100" value="-10.3688" />
                              <Key frame="150" value="-10.3688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="12.3073" />
                              <Key frame="50" value="12.3073" />
                              <Key frame="100" value="12.3073" />
                              <Key frame="150" value="12.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.2396" />
                              <Key frame="50" value="67.2396" />
                              <Key frame="100" value="67.2396" />
                              <Key frame="150" value="65.8333" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-72.8646" />
                              <Key frame="50" value="-72.8646" />
                              <Key frame="100" value="-72.8646" />
                              <Key frame="150" value="-69.9642" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-14.4166" />
                              <Key frame="50" value="102.919" />
                              <Key frame="100" value="-104.5" />
                              <Key frame="150" value="-103.275" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Comment" id="5" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="498" y="1053">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Currently unused as using text edit + say text")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Currently unused as using text edit + say text]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (1)" id="7" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="483" y="104">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Demonstration while talking")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Demonstration while talking]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (2)" id="8" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1214" y="209">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("5 Reps")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[5 Reps]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (3)" id="9" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1642" y="57">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Congrats")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Congrats]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (4)" id="10" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="355" y="546">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Explanation while the demo is running")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Explanation while the demo is running]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Text Edit" id="11" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1554" y="524">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("One more!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[One more!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text" id="12" localization="8" tooltip="Say the text received on its input." x="1831" y="514">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="78" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="16" indexofinput="2" outputowner="15" indexofoutput="4" />
                      <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                      <Link inputowner="18" indexofinput="2" outputowner="17" indexofoutput="4" />
                      <Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="4" />
                      <Link inputowner="20" indexofinput="2" outputowner="6" indexofoutput="3" />
                      <Link inputowner="25" indexofinput="2" outputowner="21" indexofoutput="4" />
                      <Link inputowner="26" indexofinput="2" outputowner="25" indexofoutput="4" />
                      <Link inputowner="27" indexofinput="2" outputowner="26" indexofoutput="4" />
                      <Link inputowner="28" indexofinput="2" outputowner="27" indexofoutput="4" />
                      <Link inputowner="23" indexofinput="2" outputowner="24" indexofoutput="4" />
                      <Link inputowner="29" indexofinput="2" outputowner="28" indexofoutput="4" />
                      <Link inputowner="30" indexofinput="2" outputowner="29" indexofoutput="4" />
                      <Link inputowner="31" indexofinput="2" outputowner="30" indexofoutput="3" />
                      <Link inputowner="24" indexofinput="2" outputowner="34" indexofoutput="3" />
                      <Link inputowner="1" indexofinput="2" outputowner="19" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="31" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="23" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="23" indexofoutput="4" />
                      <Link inputowner="29" indexofinput="2" outputowner="20" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="34" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="3" />
                      <Link inputowner="11" indexofinput="2" outputowner="18" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Arm Circles" id="3" localization="8" tooltip="Enter description here" x="828" y="434">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Green_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="Timeline5_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="59.4604">
                      <Box name="Text Edit (6)" id="6" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="217" y="659">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Stand with your feet shoulder-width apart and extend your arms straight out to your sides.\nEngage your core and keep your chest up.\nBegin making small circles with your arms, rotating them backwards.\nGradually increase the size of the circles, maintaining a controlled motion.\nTry and keep in time with me. ")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Stand with your feet shoulder-width apart and extend your arms straight out to your sides.
Engage your core and keep your chest up.
Begin making small circles with your arms, rotating them backwards.
Gradually increase the size of the circles, maintaining a controlled motion.
Try and keep in time with me. ]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (5)" id="20" localization="8" tooltip="Say the text received on its input." x="522" y="723">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="78" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say" id="21" localization="8" tooltip="Say some text with animations. The text can be localized." x="403" y="1151">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Stand with your feet shoulder-width apart and extend your arms straight out to the sides, parallel to the ground." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (1)" id="25" localization="8" tooltip="Say some text with animations. The text can be localized." x="543" y="1157">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Engage your core and keep your chest up." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (2)" id="26" localization="8" tooltip="Say some text with animations. The text can be localized." x="679" y="1157">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Without bending your elbows, twist your hands all the way forward as far as you can go.&#x0A;" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (3)" id="27" localization="8" tooltip="Say some text with animations. The text can be localized." x="811" y="1159">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Pause for a moment, then twist your arms in the reverse direction as far as you can go. &#x0A;" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (4)" id="28" localization="8" tooltip="Say some text with animations. The text can be localized." x="957" y="1166">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Repeat this motion and keep in time with me! &#x0A;" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (6)" id="23" localization="8" tooltip="Say some text with animations. The text can be localized." x="229" y="337">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="63" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I am going to explain how to do some arm circles. Listen to these instructions and then follow my lead." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Stand Up" id="24" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="208" y="196">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Stand Up (1)" id="29" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="956" y="794">
                        <bitmap>media/images/box/movement/stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="StandUpBehavior">
                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                              <Diagram>
                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="All motors" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (7)" id="30" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1176" y="833">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Ready. Steady. Go!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Ready. Steady. Go!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (6)" id="31" localization="8" tooltip="Say the text received on its input." x="1463" y="819">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Green" id="34" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="132" y="84">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                          <Choice value="Both" />
                          <Choice value="Left" />
                          <Choice value="Right" />
                        </Parameter>
                        <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                </Box>
                                <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 255, 0])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <color>#00ff00</color>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                  <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                </Box>
                                <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Animated Say (5)" id="1" localization="8" tooltip="Say some text with animations. The text can be localized." x="1741" y="156">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well Done!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Comment" id="5" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="498" y="1053">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Currently unused as using text edit + say text")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Currently unused as using text edit + say text]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (1)" id="7" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="587" y="60">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Demonstration while talking")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Demonstration while talking]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (2)" id="8" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1228" y="298">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("5 Reps")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[5 Reps]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (3)" id="9" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1642" y="57">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Congrats")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Congrats]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Comment (4)" id="10" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="355" y="546">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Explanation while the demo is running")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Explanation while the demo is running]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                      </Box>
                      <Box name="Timeline (1)" id="52" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="947" y="431">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="190">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.3805" />
                              <Key frame="27" value="-26.3651" />
                              <Key frame="40" value="-21.0916" />
                              <Key frame="52" value="-9.92936" />
                              <Key frame="65" value="-8.17153" />
                              <Key frame="77" value="-10.7204" />
                              <Key frame="90" value="-7.73207" />
                              <Key frame="102" value="-7.64417" />
                              <Key frame="115" value="-7.3805" />
                              <Key frame="127" value="-4.48007" />
                              <Key frame="140" value="-5.62267" />
                              <Key frame="152" value="-8.87466" />
                              <Key frame="165" value="-4.65585" />
                              <Key frame="177" value="-3.86484" />
                              <Key frame="190" value="-2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-45.0909" />
                              <Key frame="27" value="-57.5715" />
                              <Key frame="40" value="-53.2648" />
                              <Key frame="52" value="-51.1554" />
                              <Key frame="65" value="-58.6262" />
                              <Key frame="77" value="-61.2629" />
                              <Key frame="90" value="-60.9114" />
                              <Key frame="102" value="-55.9894" />
                              <Key frame="115" value="-45.0909" />
                              <Key frame="127" value="-46.6729" />
                              <Key frame="140" value="-60.9993" />
                              <Key frame="152" value="-62.5813" />
                              <Key frame="165" value="-62.6692" />
                              <Key frame="177" value="-57.9231" />
                              <Key frame="190" value="-38.0595" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.316" />
                              <Key frame="27" value="0.316" />
                              <Key frame="40" value="0.316" />
                              <Key frame="52" value="0.316" />
                              <Key frame="65" value="0.316" />
                              <Key frame="77" value="0.316" />
                              <Key frame="90" value="0.316" />
                              <Key frame="102" value="0.316" />
                              <Key frame="115" value="0.316" />
                              <Key frame="127" value="0.316" />
                              <Key frame="140" value="0.316" />
                              <Key frame="152" value="0.316" />
                              <Key frame="165" value="0.316" />
                              <Key frame="177" value="0.316" />
                              <Key frame="190" value="0.316" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="33.6601" />
                              <Key frame="27" value="41.8341" />
                              <Key frame="40" value="47.0197" />
                              <Key frame="52" value="64.8617" />
                              <Key frame="65" value="72.6841" />
                              <Key frame="77" value="58.094" />
                              <Key frame="90" value="29.1777" />
                              <Key frame="102" value="19.3338" />
                              <Key frame="115" value="33.6601" />
                              <Key frame="127" value="61.6097" />
                              <Key frame="140" value="79.9791" />
                              <Key frame="152" value="60.9066" />
                              <Key frame="165" value="29.3534" />
                              <Key frame="177" value="14.2361" />
                              <Key frame="190" value="23.2889" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="58.1819" />
                              <Key frame="27" value="58.9729" />
                              <Key frame="40" value="67.7621" />
                              <Key frame="52" value="58.6214" />
                              <Key frame="65" value="36.5606" />
                              <Key frame="77" value="24.6073" />
                              <Key frame="90" value="25.8378" />
                              <Key frame="102" value="37.5274" />
                              <Key frame="115" value="58.1819" />
                              <Key frame="127" value="56.1604" />
                              <Key frame="140" value="30.3202" />
                              <Key frame="152" value="17.9275" />
                              <Key frame="165" value="16.9607" />
                              <Key frame="177" value="29.9687" />
                              <Key frame="190" value="52.5568" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-28.743" />
                              <Key frame="27" value="-29.0946" />
                              <Key frame="40" value="-24.3484" />
                              <Key frame="52" value="-24.9637" />
                              <Key frame="65" value="-27.8641" />
                              <Key frame="77" value="-29.3582" />
                              <Key frame="90" value="-29.8856" />
                              <Key frame="102" value="-29.7098" />
                              <Key frame="115" value="-28.743" />
                              <Key frame="127" value="-30.5008" />
                              <Key frame="140" value="-31.8192" />
                              <Key frame="152" value="-33.7528" />
                              <Key frame="165" value="-34.5439" />
                              <Key frame="177" value="-34.1044" />
                              <Key frame="190" value="-32.9618" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="2" />
                              <Key frame="27" value="17.7565" />
                              <Key frame="40" value="6.06693" />
                              <Key frame="52" value="2" />
                              <Key frame="65" value="5.10013" />
                              <Key frame="77" value="4.13332" />
                              <Key frame="90" value="4.74855" />
                              <Key frame="102" value="3.25439" />
                              <Key frame="115" value="2" />
                              <Key frame="127" value="2" />
                              <Key frame="140" value="2.99072" />
                              <Key frame="152" value="3.69386" />
                              <Key frame="165" value="3.95753" />
                              <Key frame="177" value="5.18802" />
                              <Key frame="190" value="2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="65.4769" />
                              <Key frame="27" value="77.5181" />
                              <Key frame="40" value="77.3423" />
                              <Key frame="52" value="77.1665" />
                              <Key frame="65" value="76.9908" />
                              <Key frame="77" value="73.9145" />
                              <Key frame="90" value="70.9262" />
                              <Key frame="102" value="66.6195" />
                              <Key frame="115" value="65.4769" />
                              <Key frame="127" value="66.0043" />
                              <Key frame="140" value="68.1137" />
                              <Key frame="152" value="68.2016" />
                              <Key frame="165" value="67.6742" />
                              <Key frame="177" value="63.6312" />
                              <Key frame="190" value="58.8851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.2468" />
                              <Key frame="27" value="0.2464" />
                              <Key frame="40" value="0.2464" />
                              <Key frame="52" value="0.2464" />
                              <Key frame="65" value="0.2464" />
                              <Key frame="77" value="0.2468" />
                              <Key frame="90" value="0.2468" />
                              <Key frame="102" value="0.2464" />
                              <Key frame="115" value="0.2468" />
                              <Key frame="127" value="0.2468" />
                              <Key frame="140" value="0.2468" />
                              <Key frame="152" value="0.2464" />
                              <Key frame="165" value="0.2464" />
                              <Key frame="177" value="0.2464" />
                              <Key frame="190" value="0.2464" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="59.2414" />
                              <Key frame="27" value="92.904" />
                              <Key frame="40" value="96.3317" />
                              <Key frame="52" value="106.615" />
                              <Key frame="65" value="102.308" />
                              <Key frame="77" value="66.5365" />
                              <Key frame="90" value="52.2101" />
                              <Key frame="102" value="50.1886" />
                              <Key frame="115" value="59.2414" />
                              <Key frame="127" value="86.8394" />
                              <Key frame="140" value="97.2986" />
                              <Key frame="152" value="68.0306" />
                              <Key frame="165" value="44.9151" />
                              <Key frame="177" value="39.6416" />
                              <Key frame="190" value="48.9581" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-74.6225" />
                              <Key frame="27" value="-76" />
                              <Key frame="40" value="-75.6772" />
                              <Key frame="52" value="-60.5598" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="77" value="-31.7313" />
                              <Key frame="90" value="-49.7491" />
                              <Key frame="102" value="-72.1615" />
                              <Key frame="115" value="-74.6225" />
                              <Key frame="127" value="-60.1203" />
                              <Key frame="140" value="-34.1044" />
                              <Key frame="152" value="-22.5906" />
                              <Key frame="165" value="-36.4775" />
                              <Key frame="177" value="-62.5813" />
                              <Key frame="190" value="-72.4252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-30.3251" />
                              <Key frame="27" value="-27.3367" />
                              <Key frame="40" value="-29.1825" />
                              <Key frame="52" value="-29.0067" />
                              <Key frame="65" value="-29.0946" />
                              <Key frame="77" value="-29.0946" />
                              <Key frame="90" value="-30.4129" />
                              <Key frame="102" value="-30.5887" />
                              <Key frame="115" value="-30.3251" />
                              <Key frame="127" value="-27.4246" />
                              <Key frame="140" value="-27.1609" />
                              <Key frame="152" value="-27.2488" />
                              <Key frame="165" value="-27.6883" />
                              <Key frame="177" value="-29.1825" />
                              <Key frame="190" value="-29.7977" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (2)" id="11" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1105" y="453">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="190">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.3805" />
                              <Key frame="27" value="-26.3651" />
                              <Key frame="40" value="-21.0916" />
                              <Key frame="52" value="-9.92936" />
                              <Key frame="65" value="-8.17153" />
                              <Key frame="77" value="-10.7204" />
                              <Key frame="90" value="-7.73207" />
                              <Key frame="102" value="-7.64417" />
                              <Key frame="115" value="-7.3805" />
                              <Key frame="127" value="-4.48007" />
                              <Key frame="140" value="-5.62267" />
                              <Key frame="152" value="-8.87466" />
                              <Key frame="165" value="-4.65585" />
                              <Key frame="177" value="-3.86484" />
                              <Key frame="190" value="-2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-45.0909" />
                              <Key frame="27" value="-57.5715" />
                              <Key frame="40" value="-53.2648" />
                              <Key frame="52" value="-51.1554" />
                              <Key frame="65" value="-58.6262" />
                              <Key frame="77" value="-61.2629" />
                              <Key frame="90" value="-60.9114" />
                              <Key frame="102" value="-55.9894" />
                              <Key frame="115" value="-45.0909" />
                              <Key frame="127" value="-46.6729" />
                              <Key frame="140" value="-60.9993" />
                              <Key frame="152" value="-62.5813" />
                              <Key frame="165" value="-62.6692" />
                              <Key frame="177" value="-57.9231" />
                              <Key frame="190" value="-38.0595" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.316" />
                              <Key frame="27" value="0.316" />
                              <Key frame="40" value="0.316" />
                              <Key frame="52" value="0.316" />
                              <Key frame="65" value="0.316" />
                              <Key frame="77" value="0.316" />
                              <Key frame="90" value="0.316" />
                              <Key frame="102" value="0.316" />
                              <Key frame="115" value="0.316" />
                              <Key frame="127" value="0.316" />
                              <Key frame="140" value="0.316" />
                              <Key frame="152" value="0.316" />
                              <Key frame="165" value="0.316" />
                              <Key frame="177" value="0.316" />
                              <Key frame="190" value="0.316" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="33.6601" />
                              <Key frame="27" value="41.8341" />
                              <Key frame="40" value="47.0197" />
                              <Key frame="52" value="64.8617" />
                              <Key frame="65" value="72.6841" />
                              <Key frame="77" value="58.094" />
                              <Key frame="90" value="29.1777" />
                              <Key frame="102" value="19.3338" />
                              <Key frame="115" value="33.6601" />
                              <Key frame="127" value="61.6097" />
                              <Key frame="140" value="79.9791" />
                              <Key frame="152" value="60.9066" />
                              <Key frame="165" value="29.3534" />
                              <Key frame="177" value="14.2361" />
                              <Key frame="190" value="23.2889" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="58.1819" />
                              <Key frame="27" value="58.9729" />
                              <Key frame="40" value="67.7621" />
                              <Key frame="52" value="58.6214" />
                              <Key frame="65" value="36.5606" />
                              <Key frame="77" value="24.6073" />
                              <Key frame="90" value="25.8378" />
                              <Key frame="102" value="37.5274" />
                              <Key frame="115" value="58.1819" />
                              <Key frame="127" value="56.1604" />
                              <Key frame="140" value="30.3202" />
                              <Key frame="152" value="17.9275" />
                              <Key frame="165" value="16.9607" />
                              <Key frame="177" value="29.9687" />
                              <Key frame="190" value="52.5568" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-28.743" />
                              <Key frame="27" value="-29.0946" />
                              <Key frame="40" value="-24.3484" />
                              <Key frame="52" value="-24.9637" />
                              <Key frame="65" value="-27.8641" />
                              <Key frame="77" value="-29.3582" />
                              <Key frame="90" value="-29.8856" />
                              <Key frame="102" value="-29.7098" />
                              <Key frame="115" value="-28.743" />
                              <Key frame="127" value="-30.5008" />
                              <Key frame="140" value="-31.8192" />
                              <Key frame="152" value="-33.7528" />
                              <Key frame="165" value="-34.5439" />
                              <Key frame="177" value="-34.1044" />
                              <Key frame="190" value="-32.9618" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="2" />
                              <Key frame="27" value="17.7565" />
                              <Key frame="40" value="6.06693" />
                              <Key frame="52" value="2" />
                              <Key frame="65" value="5.10013" />
                              <Key frame="77" value="4.13332" />
                              <Key frame="90" value="4.74855" />
                              <Key frame="102" value="3.25439" />
                              <Key frame="115" value="2" />
                              <Key frame="127" value="2" />
                              <Key frame="140" value="2.99072" />
                              <Key frame="152" value="3.69386" />
                              <Key frame="165" value="3.95753" />
                              <Key frame="177" value="5.18802" />
                              <Key frame="190" value="2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="65.4769" />
                              <Key frame="27" value="77.5181" />
                              <Key frame="40" value="77.3423" />
                              <Key frame="52" value="77.1665" />
                              <Key frame="65" value="76.9908" />
                              <Key frame="77" value="73.9145" />
                              <Key frame="90" value="70.9262" />
                              <Key frame="102" value="66.6195" />
                              <Key frame="115" value="65.4769" />
                              <Key frame="127" value="66.0043" />
                              <Key frame="140" value="68.1137" />
                              <Key frame="152" value="68.2016" />
                              <Key frame="165" value="67.6742" />
                              <Key frame="177" value="63.6312" />
                              <Key frame="190" value="58.8851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.2468" />
                              <Key frame="27" value="0.2464" />
                              <Key frame="40" value="0.2464" />
                              <Key frame="52" value="0.2464" />
                              <Key frame="65" value="0.2464" />
                              <Key frame="77" value="0.2468" />
                              <Key frame="90" value="0.2468" />
                              <Key frame="102" value="0.2464" />
                              <Key frame="115" value="0.2468" />
                              <Key frame="127" value="0.2468" />
                              <Key frame="140" value="0.2468" />
                              <Key frame="152" value="0.2464" />
                              <Key frame="165" value="0.2464" />
                              <Key frame="177" value="0.2464" />
                              <Key frame="190" value="0.2464" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="59.2414" />
                              <Key frame="27" value="92.904" />
                              <Key frame="40" value="96.3317" />
                              <Key frame="52" value="106.615" />
                              <Key frame="65" value="102.308" />
                              <Key frame="77" value="66.5365" />
                              <Key frame="90" value="52.2101" />
                              <Key frame="102" value="50.1886" />
                              <Key frame="115" value="59.2414" />
                              <Key frame="127" value="86.8394" />
                              <Key frame="140" value="97.2986" />
                              <Key frame="152" value="68.0306" />
                              <Key frame="165" value="44.9151" />
                              <Key frame="177" value="39.6416" />
                              <Key frame="190" value="48.9581" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-74.6225" />
                              <Key frame="27" value="-76" />
                              <Key frame="40" value="-75.6772" />
                              <Key frame="52" value="-60.5598" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="77" value="-31.7313" />
                              <Key frame="90" value="-49.7491" />
                              <Key frame="102" value="-72.1615" />
                              <Key frame="115" value="-74.6225" />
                              <Key frame="127" value="-60.1203" />
                              <Key frame="140" value="-34.1044" />
                              <Key frame="152" value="-22.5906" />
                              <Key frame="165" value="-36.4775" />
                              <Key frame="177" value="-62.5813" />
                              <Key frame="190" value="-72.4252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-30.3251" />
                              <Key frame="27" value="-27.3367" />
                              <Key frame="40" value="-29.1825" />
                              <Key frame="52" value="-29.0067" />
                              <Key frame="65" value="-29.0946" />
                              <Key frame="77" value="-29.0946" />
                              <Key frame="90" value="-30.4129" />
                              <Key frame="102" value="-30.5887" />
                              <Key frame="115" value="-30.3251" />
                              <Key frame="127" value="-27.4246" />
                              <Key frame="140" value="-27.1609" />
                              <Key frame="152" value="-27.2488" />
                              <Key frame="165" value="-27.6883" />
                              <Key frame="177" value="-29.1825" />
                              <Key frame="190" value="-29.7977" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (3)" id="12" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1268" y="459">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="190">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.3805" />
                              <Key frame="27" value="-26.3651" />
                              <Key frame="40" value="-21.0916" />
                              <Key frame="52" value="-9.92936" />
                              <Key frame="65" value="-8.17153" />
                              <Key frame="77" value="-10.7204" />
                              <Key frame="90" value="-7.73207" />
                              <Key frame="102" value="-7.64417" />
                              <Key frame="115" value="-7.3805" />
                              <Key frame="127" value="-4.48007" />
                              <Key frame="140" value="-5.62267" />
                              <Key frame="152" value="-8.87466" />
                              <Key frame="165" value="-4.65585" />
                              <Key frame="177" value="-3.86484" />
                              <Key frame="190" value="-2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-45.0909" />
                              <Key frame="27" value="-57.5715" />
                              <Key frame="40" value="-53.2648" />
                              <Key frame="52" value="-51.1554" />
                              <Key frame="65" value="-58.6262" />
                              <Key frame="77" value="-61.2629" />
                              <Key frame="90" value="-60.9114" />
                              <Key frame="102" value="-55.9894" />
                              <Key frame="115" value="-45.0909" />
                              <Key frame="127" value="-46.6729" />
                              <Key frame="140" value="-60.9993" />
                              <Key frame="152" value="-62.5813" />
                              <Key frame="165" value="-62.6692" />
                              <Key frame="177" value="-57.9231" />
                              <Key frame="190" value="-38.0595" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.316" />
                              <Key frame="27" value="0.316" />
                              <Key frame="40" value="0.316" />
                              <Key frame="52" value="0.316" />
                              <Key frame="65" value="0.316" />
                              <Key frame="77" value="0.316" />
                              <Key frame="90" value="0.316" />
                              <Key frame="102" value="0.316" />
                              <Key frame="115" value="0.316" />
                              <Key frame="127" value="0.316" />
                              <Key frame="140" value="0.316" />
                              <Key frame="152" value="0.316" />
                              <Key frame="165" value="0.316" />
                              <Key frame="177" value="0.316" />
                              <Key frame="190" value="0.316" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="33.6601" />
                              <Key frame="27" value="41.8341" />
                              <Key frame="40" value="47.0197" />
                              <Key frame="52" value="64.8617" />
                              <Key frame="65" value="72.6841" />
                              <Key frame="77" value="58.094" />
                              <Key frame="90" value="29.1777" />
                              <Key frame="102" value="19.3338" />
                              <Key frame="115" value="33.6601" />
                              <Key frame="127" value="61.6097" />
                              <Key frame="140" value="79.9791" />
                              <Key frame="152" value="60.9066" />
                              <Key frame="165" value="29.3534" />
                              <Key frame="177" value="14.2361" />
                              <Key frame="190" value="23.2889" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="58.1819" />
                              <Key frame="27" value="58.9729" />
                              <Key frame="40" value="67.7621" />
                              <Key frame="52" value="58.6214" />
                              <Key frame="65" value="36.5606" />
                              <Key frame="77" value="24.6073" />
                              <Key frame="90" value="25.8378" />
                              <Key frame="102" value="37.5274" />
                              <Key frame="115" value="58.1819" />
                              <Key frame="127" value="56.1604" />
                              <Key frame="140" value="30.3202" />
                              <Key frame="152" value="17.9275" />
                              <Key frame="165" value="16.9607" />
                              <Key frame="177" value="29.9687" />
                              <Key frame="190" value="52.5568" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-28.743" />
                              <Key frame="27" value="-29.0946" />
                              <Key frame="40" value="-24.3484" />
                              <Key frame="52" value="-24.9637" />
                              <Key frame="65" value="-27.8641" />
                              <Key frame="77" value="-29.3582" />
                              <Key frame="90" value="-29.8856" />
                              <Key frame="102" value="-29.7098" />
                              <Key frame="115" value="-28.743" />
                              <Key frame="127" value="-30.5008" />
                              <Key frame="140" value="-31.8192" />
                              <Key frame="152" value="-33.7528" />
                              <Key frame="165" value="-34.5439" />
                              <Key frame="177" value="-34.1044" />
                              <Key frame="190" value="-32.9618" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="2" />
                              <Key frame="27" value="17.7565" />
                              <Key frame="40" value="6.06693" />
                              <Key frame="52" value="2" />
                              <Key frame="65" value="5.10013" />
                              <Key frame="77" value="4.13332" />
                              <Key frame="90" value="4.74855" />
                              <Key frame="102" value="3.25439" />
                              <Key frame="115" value="2" />
                              <Key frame="127" value="2" />
                              <Key frame="140" value="2.99072" />
                              <Key frame="152" value="3.69386" />
                              <Key frame="165" value="3.95753" />
                              <Key frame="177" value="5.18802" />
                              <Key frame="190" value="2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="65.4769" />
                              <Key frame="27" value="77.5181" />
                              <Key frame="40" value="77.3423" />
                              <Key frame="52" value="77.1665" />
                              <Key frame="65" value="76.9908" />
                              <Key frame="77" value="73.9145" />
                              <Key frame="90" value="70.9262" />
                              <Key frame="102" value="66.6195" />
                              <Key frame="115" value="65.4769" />
                              <Key frame="127" value="66.0043" />
                              <Key frame="140" value="68.1137" />
                              <Key frame="152" value="68.2016" />
                              <Key frame="165" value="67.6742" />
                              <Key frame="177" value="63.6312" />
                              <Key frame="190" value="58.8851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.2468" />
                              <Key frame="27" value="0.2464" />
                              <Key frame="40" value="0.2464" />
                              <Key frame="52" value="0.2464" />
                              <Key frame="65" value="0.2464" />
                              <Key frame="77" value="0.2468" />
                              <Key frame="90" value="0.2468" />
                              <Key frame="102" value="0.2464" />
                              <Key frame="115" value="0.2468" />
                              <Key frame="127" value="0.2468" />
                              <Key frame="140" value="0.2468" />
                              <Key frame="152" value="0.2464" />
                              <Key frame="165" value="0.2464" />
                              <Key frame="177" value="0.2464" />
                              <Key frame="190" value="0.2464" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="59.2414" />
                              <Key frame="27" value="92.904" />
                              <Key frame="40" value="96.3317" />
                              <Key frame="52" value="106.615" />
                              <Key frame="65" value="102.308" />
                              <Key frame="77" value="66.5365" />
                              <Key frame="90" value="52.2101" />
                              <Key frame="102" value="50.1886" />
                              <Key frame="115" value="59.2414" />
                              <Key frame="127" value="86.8394" />
                              <Key frame="140" value="97.2986" />
                              <Key frame="152" value="68.0306" />
                              <Key frame="165" value="44.9151" />
                              <Key frame="177" value="39.6416" />
                              <Key frame="190" value="48.9581" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-74.6225" />
                              <Key frame="27" value="-76" />
                              <Key frame="40" value="-75.6772" />
                              <Key frame="52" value="-60.5598" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="77" value="-31.7313" />
                              <Key frame="90" value="-49.7491" />
                              <Key frame="102" value="-72.1615" />
                              <Key frame="115" value="-74.6225" />
                              <Key frame="127" value="-60.1203" />
                              <Key frame="140" value="-34.1044" />
                              <Key frame="152" value="-22.5906" />
                              <Key frame="165" value="-36.4775" />
                              <Key frame="177" value="-62.5813" />
                              <Key frame="190" value="-72.4252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-30.3251" />
                              <Key frame="27" value="-27.3367" />
                              <Key frame="40" value="-29.1825" />
                              <Key frame="52" value="-29.0067" />
                              <Key frame="65" value="-29.0946" />
                              <Key frame="77" value="-29.0946" />
                              <Key frame="90" value="-30.4129" />
                              <Key frame="102" value="-30.5887" />
                              <Key frame="115" value="-30.3251" />
                              <Key frame="127" value="-27.4246" />
                              <Key frame="140" value="-27.1609" />
                              <Key frame="152" value="-27.2488" />
                              <Key frame="165" value="-27.6883" />
                              <Key frame="177" value="-29.1825" />
                              <Key frame="190" value="-29.7977" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (4)" id="13" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1423" y="455">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="190">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.3805" />
                              <Key frame="27" value="-26.3651" />
                              <Key frame="40" value="-21.0916" />
                              <Key frame="52" value="-9.92936" />
                              <Key frame="65" value="-8.17153" />
                              <Key frame="77" value="-10.7204" />
                              <Key frame="90" value="-7.73207" />
                              <Key frame="102" value="-7.64417" />
                              <Key frame="115" value="-7.3805" />
                              <Key frame="127" value="-4.48007" />
                              <Key frame="140" value="-5.62267" />
                              <Key frame="152" value="-8.87466" />
                              <Key frame="165" value="-4.65585" />
                              <Key frame="177" value="-3.86484" />
                              <Key frame="190" value="-2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-45.0909" />
                              <Key frame="27" value="-57.5715" />
                              <Key frame="40" value="-53.2648" />
                              <Key frame="52" value="-51.1554" />
                              <Key frame="65" value="-58.6262" />
                              <Key frame="77" value="-61.2629" />
                              <Key frame="90" value="-60.9114" />
                              <Key frame="102" value="-55.9894" />
                              <Key frame="115" value="-45.0909" />
                              <Key frame="127" value="-46.6729" />
                              <Key frame="140" value="-60.9993" />
                              <Key frame="152" value="-62.5813" />
                              <Key frame="165" value="-62.6692" />
                              <Key frame="177" value="-57.9231" />
                              <Key frame="190" value="-38.0595" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.316" />
                              <Key frame="27" value="0.316" />
                              <Key frame="40" value="0.316" />
                              <Key frame="52" value="0.316" />
                              <Key frame="65" value="0.316" />
                              <Key frame="77" value="0.316" />
                              <Key frame="90" value="0.316" />
                              <Key frame="102" value="0.316" />
                              <Key frame="115" value="0.316" />
                              <Key frame="127" value="0.316" />
                              <Key frame="140" value="0.316" />
                              <Key frame="152" value="0.316" />
                              <Key frame="165" value="0.316" />
                              <Key frame="177" value="0.316" />
                              <Key frame="190" value="0.316" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="33.6601" />
                              <Key frame="27" value="41.8341" />
                              <Key frame="40" value="47.0197" />
                              <Key frame="52" value="64.8617" />
                              <Key frame="65" value="72.6841" />
                              <Key frame="77" value="58.094" />
                              <Key frame="90" value="29.1777" />
                              <Key frame="102" value="19.3338" />
                              <Key frame="115" value="33.6601" />
                              <Key frame="127" value="61.6097" />
                              <Key frame="140" value="79.9791" />
                              <Key frame="152" value="60.9066" />
                              <Key frame="165" value="29.3534" />
                              <Key frame="177" value="14.2361" />
                              <Key frame="190" value="23.2889" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="58.1819" />
                              <Key frame="27" value="58.9729" />
                              <Key frame="40" value="67.7621" />
                              <Key frame="52" value="58.6214" />
                              <Key frame="65" value="36.5606" />
                              <Key frame="77" value="24.6073" />
                              <Key frame="90" value="25.8378" />
                              <Key frame="102" value="37.5274" />
                              <Key frame="115" value="58.1819" />
                              <Key frame="127" value="56.1604" />
                              <Key frame="140" value="30.3202" />
                              <Key frame="152" value="17.9275" />
                              <Key frame="165" value="16.9607" />
                              <Key frame="177" value="29.9687" />
                              <Key frame="190" value="52.5568" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-28.743" />
                              <Key frame="27" value="-29.0946" />
                              <Key frame="40" value="-24.3484" />
                              <Key frame="52" value="-24.9637" />
                              <Key frame="65" value="-27.8641" />
                              <Key frame="77" value="-29.3582" />
                              <Key frame="90" value="-29.8856" />
                              <Key frame="102" value="-29.7098" />
                              <Key frame="115" value="-28.743" />
                              <Key frame="127" value="-30.5008" />
                              <Key frame="140" value="-31.8192" />
                              <Key frame="152" value="-33.7528" />
                              <Key frame="165" value="-34.5439" />
                              <Key frame="177" value="-34.1044" />
                              <Key frame="190" value="-32.9618" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="2" />
                              <Key frame="27" value="17.7565" />
                              <Key frame="40" value="6.06693" />
                              <Key frame="52" value="2" />
                              <Key frame="65" value="5.10013" />
                              <Key frame="77" value="4.13332" />
                              <Key frame="90" value="4.74855" />
                              <Key frame="102" value="3.25439" />
                              <Key frame="115" value="2" />
                              <Key frame="127" value="2" />
                              <Key frame="140" value="2.99072" />
                              <Key frame="152" value="3.69386" />
                              <Key frame="165" value="3.95753" />
                              <Key frame="177" value="5.18802" />
                              <Key frame="190" value="2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="65.4769" />
                              <Key frame="27" value="77.5181" />
                              <Key frame="40" value="77.3423" />
                              <Key frame="52" value="77.1665" />
                              <Key frame="65" value="76.9908" />
                              <Key frame="77" value="73.9145" />
                              <Key frame="90" value="70.9262" />
                              <Key frame="102" value="66.6195" />
                              <Key frame="115" value="65.4769" />
                              <Key frame="127" value="66.0043" />
                              <Key frame="140" value="68.1137" />
                              <Key frame="152" value="68.2016" />
                              <Key frame="165" value="67.6742" />
                              <Key frame="177" value="63.6312" />
                              <Key frame="190" value="58.8851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.2468" />
                              <Key frame="27" value="0.2464" />
                              <Key frame="40" value="0.2464" />
                              <Key frame="52" value="0.2464" />
                              <Key frame="65" value="0.2464" />
                              <Key frame="77" value="0.2468" />
                              <Key frame="90" value="0.2468" />
                              <Key frame="102" value="0.2464" />
                              <Key frame="115" value="0.2468" />
                              <Key frame="127" value="0.2468" />
                              <Key frame="140" value="0.2468" />
                              <Key frame="152" value="0.2464" />
                              <Key frame="165" value="0.2464" />
                              <Key frame="177" value="0.2464" />
                              <Key frame="190" value="0.2464" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="59.2414" />
                              <Key frame="27" value="92.904" />
                              <Key frame="40" value="96.3317" />
                              <Key frame="52" value="106.615" />
                              <Key frame="65" value="102.308" />
                              <Key frame="77" value="66.5365" />
                              <Key frame="90" value="52.2101" />
                              <Key frame="102" value="50.1886" />
                              <Key frame="115" value="59.2414" />
                              <Key frame="127" value="86.8394" />
                              <Key frame="140" value="97.2986" />
                              <Key frame="152" value="68.0306" />
                              <Key frame="165" value="44.9151" />
                              <Key frame="177" value="39.6416" />
                              <Key frame="190" value="48.9581" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-74.6225" />
                              <Key frame="27" value="-76" />
                              <Key frame="40" value="-75.6772" />
                              <Key frame="52" value="-60.5598" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="77" value="-31.7313" />
                              <Key frame="90" value="-49.7491" />
                              <Key frame="102" value="-72.1615" />
                              <Key frame="115" value="-74.6225" />
                              <Key frame="127" value="-60.1203" />
                              <Key frame="140" value="-34.1044" />
                              <Key frame="152" value="-22.5906" />
                              <Key frame="165" value="-36.4775" />
                              <Key frame="177" value="-62.5813" />
                              <Key frame="190" value="-72.4252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-30.3251" />
                              <Key frame="27" value="-27.3367" />
                              <Key frame="40" value="-29.1825" />
                              <Key frame="52" value="-29.0067" />
                              <Key frame="65" value="-29.0946" />
                              <Key frame="77" value="-29.0946" />
                              <Key frame="90" value="-30.4129" />
                              <Key frame="102" value="-30.5887" />
                              <Key frame="115" value="-30.3251" />
                              <Key frame="127" value="-27.4246" />
                              <Key frame="140" value="-27.1609" />
                              <Key frame="152" value="-27.2488" />
                              <Key frame="165" value="-27.6883" />
                              <Key frame="177" value="-29.1825" />
                              <Key frame="190" value="-29.7977" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (5)" id="14" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1558" y="455">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="190">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.3805" />
                              <Key frame="27" value="-26.3651" />
                              <Key frame="40" value="-21.0916" />
                              <Key frame="52" value="-9.92936" />
                              <Key frame="65" value="-8.17153" />
                              <Key frame="77" value="-10.7204" />
                              <Key frame="90" value="-7.73207" />
                              <Key frame="102" value="-7.64417" />
                              <Key frame="115" value="-7.3805" />
                              <Key frame="127" value="-4.48007" />
                              <Key frame="140" value="-5.62267" />
                              <Key frame="152" value="-8.87466" />
                              <Key frame="165" value="-4.65585" />
                              <Key frame="177" value="-3.86484" />
                              <Key frame="190" value="-2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-45.0909" />
                              <Key frame="27" value="-57.5715" />
                              <Key frame="40" value="-53.2648" />
                              <Key frame="52" value="-51.1554" />
                              <Key frame="65" value="-58.6262" />
                              <Key frame="77" value="-61.2629" />
                              <Key frame="90" value="-60.9114" />
                              <Key frame="102" value="-55.9894" />
                              <Key frame="115" value="-45.0909" />
                              <Key frame="127" value="-46.6729" />
                              <Key frame="140" value="-60.9993" />
                              <Key frame="152" value="-62.5813" />
                              <Key frame="165" value="-62.6692" />
                              <Key frame="177" value="-57.9231" />
                              <Key frame="190" value="-38.0595" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.316" />
                              <Key frame="27" value="0.316" />
                              <Key frame="40" value="0.316" />
                              <Key frame="52" value="0.316" />
                              <Key frame="65" value="0.316" />
                              <Key frame="77" value="0.316" />
                              <Key frame="90" value="0.316" />
                              <Key frame="102" value="0.316" />
                              <Key frame="115" value="0.316" />
                              <Key frame="127" value="0.316" />
                              <Key frame="140" value="0.316" />
                              <Key frame="152" value="0.316" />
                              <Key frame="165" value="0.316" />
                              <Key frame="177" value="0.316" />
                              <Key frame="190" value="0.316" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="33.6601" />
                              <Key frame="27" value="41.8341" />
                              <Key frame="40" value="47.0197" />
                              <Key frame="52" value="64.8617" />
                              <Key frame="65" value="72.6841" />
                              <Key frame="77" value="58.094" />
                              <Key frame="90" value="29.1777" />
                              <Key frame="102" value="19.3338" />
                              <Key frame="115" value="33.6601" />
                              <Key frame="127" value="61.6097" />
                              <Key frame="140" value="79.9791" />
                              <Key frame="152" value="60.9066" />
                              <Key frame="165" value="29.3534" />
                              <Key frame="177" value="14.2361" />
                              <Key frame="190" value="23.2889" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="58.1819" />
                              <Key frame="27" value="58.9729" />
                              <Key frame="40" value="67.7621" />
                              <Key frame="52" value="58.6214" />
                              <Key frame="65" value="36.5606" />
                              <Key frame="77" value="24.6073" />
                              <Key frame="90" value="25.8378" />
                              <Key frame="102" value="37.5274" />
                              <Key frame="115" value="58.1819" />
                              <Key frame="127" value="56.1604" />
                              <Key frame="140" value="30.3202" />
                              <Key frame="152" value="17.9275" />
                              <Key frame="165" value="16.9607" />
                              <Key frame="177" value="29.9687" />
                              <Key frame="190" value="52.5568" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-28.743" />
                              <Key frame="27" value="-29.0946" />
                              <Key frame="40" value="-24.3484" />
                              <Key frame="52" value="-24.9637" />
                              <Key frame="65" value="-27.8641" />
                              <Key frame="77" value="-29.3582" />
                              <Key frame="90" value="-29.8856" />
                              <Key frame="102" value="-29.7098" />
                              <Key frame="115" value="-28.743" />
                              <Key frame="127" value="-30.5008" />
                              <Key frame="140" value="-31.8192" />
                              <Key frame="152" value="-33.7528" />
                              <Key frame="165" value="-34.5439" />
                              <Key frame="177" value="-34.1044" />
                              <Key frame="190" value="-32.9618" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="2" />
                              <Key frame="27" value="17.7565" />
                              <Key frame="40" value="6.06693" />
                              <Key frame="52" value="2" />
                              <Key frame="65" value="5.10013" />
                              <Key frame="77" value="4.13332" />
                              <Key frame="90" value="4.74855" />
                              <Key frame="102" value="3.25439" />
                              <Key frame="115" value="2" />
                              <Key frame="127" value="2" />
                              <Key frame="140" value="2.99072" />
                              <Key frame="152" value="3.69386" />
                              <Key frame="165" value="3.95753" />
                              <Key frame="177" value="5.18802" />
                              <Key frame="190" value="2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="65.4769" />
                              <Key frame="27" value="77.5181" />
                              <Key frame="40" value="77.3423" />
                              <Key frame="52" value="77.1665" />
                              <Key frame="65" value="76.9908" />
                              <Key frame="77" value="73.9145" />
                              <Key frame="90" value="70.9262" />
                              <Key frame="102" value="66.6195" />
                              <Key frame="115" value="65.4769" />
                              <Key frame="127" value="66.0043" />
                              <Key frame="140" value="68.1137" />
                              <Key frame="152" value="68.2016" />
                              <Key frame="165" value="67.6742" />
                              <Key frame="177" value="63.6312" />
                              <Key frame="190" value="58.8851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.2468" />
                              <Key frame="27" value="0.2464" />
                              <Key frame="40" value="0.2464" />
                              <Key frame="52" value="0.2464" />
                              <Key frame="65" value="0.2464" />
                              <Key frame="77" value="0.2468" />
                              <Key frame="90" value="0.2468" />
                              <Key frame="102" value="0.2464" />
                              <Key frame="115" value="0.2468" />
                              <Key frame="127" value="0.2468" />
                              <Key frame="140" value="0.2468" />
                              <Key frame="152" value="0.2464" />
                              <Key frame="165" value="0.2464" />
                              <Key frame="177" value="0.2464" />
                              <Key frame="190" value="0.2464" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="59.2414" />
                              <Key frame="27" value="92.904" />
                              <Key frame="40" value="96.3317" />
                              <Key frame="52" value="106.615" />
                              <Key frame="65" value="102.308" />
                              <Key frame="77" value="66.5365" />
                              <Key frame="90" value="52.2101" />
                              <Key frame="102" value="50.1886" />
                              <Key frame="115" value="59.2414" />
                              <Key frame="127" value="86.8394" />
                              <Key frame="140" value="97.2986" />
                              <Key frame="152" value="68.0306" />
                              <Key frame="165" value="44.9151" />
                              <Key frame="177" value="39.6416" />
                              <Key frame="190" value="48.9581" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-74.6225" />
                              <Key frame="27" value="-76" />
                              <Key frame="40" value="-75.6772" />
                              <Key frame="52" value="-60.5598" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="77" value="-31.7313" />
                              <Key frame="90" value="-49.7491" />
                              <Key frame="102" value="-72.1615" />
                              <Key frame="115" value="-74.6225" />
                              <Key frame="127" value="-60.1203" />
                              <Key frame="140" value="-34.1044" />
                              <Key frame="152" value="-22.5906" />
                              <Key frame="165" value="-36.4775" />
                              <Key frame="177" value="-62.5813" />
                              <Key frame="190" value="-72.4252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-30.3251" />
                              <Key frame="27" value="-27.3367" />
                              <Key frame="40" value="-29.1825" />
                              <Key frame="52" value="-29.0067" />
                              <Key frame="65" value="-29.0946" />
                              <Key frame="77" value="-29.0946" />
                              <Key frame="90" value="-30.4129" />
                              <Key frame="102" value="-30.5887" />
                              <Key frame="115" value="-30.3251" />
                              <Key frame="127" value="-27.4246" />
                              <Key frame="140" value="-27.1609" />
                              <Key frame="152" value="-27.2488" />
                              <Key frame="165" value="-27.6883" />
                              <Key frame="177" value="-29.1825" />
                              <Key frame="190" value="-29.7977" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="579" y="184">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="190">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.3805" />
                              <Key frame="27" value="-26.3651" />
                              <Key frame="40" value="-21.0916" />
                              <Key frame="52" value="-9.92936" />
                              <Key frame="65" value="-8.17153" />
                              <Key frame="77" value="-10.7204" />
                              <Key frame="90" value="-7.73207" />
                              <Key frame="102" value="-7.64417" />
                              <Key frame="115" value="-7.3805" />
                              <Key frame="127" value="-4.48007" />
                              <Key frame="140" value="-5.62267" />
                              <Key frame="152" value="-8.87466" />
                              <Key frame="165" value="-4.65585" />
                              <Key frame="177" value="-3.86484" />
                              <Key frame="190" value="-2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-45.0909" />
                              <Key frame="27" value="-57.5715" />
                              <Key frame="40" value="-53.2648" />
                              <Key frame="52" value="-51.1554" />
                              <Key frame="65" value="-58.6262" />
                              <Key frame="77" value="-61.2629" />
                              <Key frame="90" value="-60.9114" />
                              <Key frame="102" value="-55.9894" />
                              <Key frame="115" value="-45.0909" />
                              <Key frame="127" value="-46.6729" />
                              <Key frame="140" value="-60.9993" />
                              <Key frame="152" value="-62.5813" />
                              <Key frame="165" value="-62.6692" />
                              <Key frame="177" value="-57.9231" />
                              <Key frame="190" value="-38.0595" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.316" />
                              <Key frame="27" value="0.316" />
                              <Key frame="40" value="0.316" />
                              <Key frame="52" value="0.316" />
                              <Key frame="65" value="0.316" />
                              <Key frame="77" value="0.316" />
                              <Key frame="90" value="0.316" />
                              <Key frame="102" value="0.316" />
                              <Key frame="115" value="0.316" />
                              <Key frame="127" value="0.316" />
                              <Key frame="140" value="0.316" />
                              <Key frame="152" value="0.316" />
                              <Key frame="165" value="0.316" />
                              <Key frame="177" value="0.316" />
                              <Key frame="190" value="0.316" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="33.6601" />
                              <Key frame="27" value="41.8341" />
                              <Key frame="40" value="47.0197" />
                              <Key frame="52" value="64.8617" />
                              <Key frame="65" value="72.6841" />
                              <Key frame="77" value="58.094" />
                              <Key frame="90" value="29.1777" />
                              <Key frame="102" value="19.3338" />
                              <Key frame="115" value="33.6601" />
                              <Key frame="127" value="61.6097" />
                              <Key frame="140" value="79.9791" />
                              <Key frame="152" value="60.9066" />
                              <Key frame="165" value="29.3534" />
                              <Key frame="177" value="14.2361" />
                              <Key frame="190" value="23.2889" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="58.1819" />
                              <Key frame="27" value="58.9729" />
                              <Key frame="40" value="67.7621" />
                              <Key frame="52" value="58.6214" />
                              <Key frame="65" value="36.5606" />
                              <Key frame="77" value="24.6073" />
                              <Key frame="90" value="25.8378" />
                              <Key frame="102" value="37.5274" />
                              <Key frame="115" value="58.1819" />
                              <Key frame="127" value="56.1604" />
                              <Key frame="140" value="30.3202" />
                              <Key frame="152" value="17.9275" />
                              <Key frame="165" value="16.9607" />
                              <Key frame="177" value="29.9687" />
                              <Key frame="190" value="52.5568" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-28.743" />
                              <Key frame="27" value="-29.0946" />
                              <Key frame="40" value="-24.3484" />
                              <Key frame="52" value="-24.9637" />
                              <Key frame="65" value="-27.8641" />
                              <Key frame="77" value="-29.3582" />
                              <Key frame="90" value="-29.8856" />
                              <Key frame="102" value="-29.7098" />
                              <Key frame="115" value="-28.743" />
                              <Key frame="127" value="-30.5008" />
                              <Key frame="140" value="-31.8192" />
                              <Key frame="152" value="-33.7528" />
                              <Key frame="165" value="-34.5439" />
                              <Key frame="177" value="-34.1044" />
                              <Key frame="190" value="-32.9618" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="2" />
                              <Key frame="27" value="17.7565" />
                              <Key frame="40" value="6.06693" />
                              <Key frame="52" value="2" />
                              <Key frame="65" value="5.10013" />
                              <Key frame="77" value="4.13332" />
                              <Key frame="90" value="4.74855" />
                              <Key frame="102" value="3.25439" />
                              <Key frame="115" value="2" />
                              <Key frame="127" value="2" />
                              <Key frame="140" value="2.99072" />
                              <Key frame="152" value="3.69386" />
                              <Key frame="165" value="3.95753" />
                              <Key frame="177" value="5.18802" />
                              <Key frame="190" value="2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="65.4769" />
                              <Key frame="27" value="77.5181" />
                              <Key frame="40" value="77.3423" />
                              <Key frame="52" value="77.1665" />
                              <Key frame="65" value="76.9908" />
                              <Key frame="77" value="73.9145" />
                              <Key frame="90" value="70.9262" />
                              <Key frame="102" value="66.6195" />
                              <Key frame="115" value="65.4769" />
                              <Key frame="127" value="66.0043" />
                              <Key frame="140" value="68.1137" />
                              <Key frame="152" value="68.2016" />
                              <Key frame="165" value="67.6742" />
                              <Key frame="177" value="63.6312" />
                              <Key frame="190" value="58.8851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.2468" />
                              <Key frame="27" value="0.2464" />
                              <Key frame="40" value="0.2464" />
                              <Key frame="52" value="0.2464" />
                              <Key frame="65" value="0.2464" />
                              <Key frame="77" value="0.2468" />
                              <Key frame="90" value="0.2468" />
                              <Key frame="102" value="0.2464" />
                              <Key frame="115" value="0.2468" />
                              <Key frame="127" value="0.2468" />
                              <Key frame="140" value="0.2468" />
                              <Key frame="152" value="0.2464" />
                              <Key frame="165" value="0.2464" />
                              <Key frame="177" value="0.2464" />
                              <Key frame="190" value="0.2464" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="59.2414" />
                              <Key frame="27" value="92.904" />
                              <Key frame="40" value="96.3317" />
                              <Key frame="52" value="106.615" />
                              <Key frame="65" value="102.308" />
                              <Key frame="77" value="66.5365" />
                              <Key frame="90" value="52.2101" />
                              <Key frame="102" value="50.1886" />
                              <Key frame="115" value="59.2414" />
                              <Key frame="127" value="86.8394" />
                              <Key frame="140" value="97.2986" />
                              <Key frame="152" value="68.0306" />
                              <Key frame="165" value="44.9151" />
                              <Key frame="177" value="39.6416" />
                              <Key frame="190" value="48.9581" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-74.6225" />
                              <Key frame="27" value="-76" />
                              <Key frame="40" value="-75.6772" />
                              <Key frame="52" value="-60.5598" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="77" value="-31.7313" />
                              <Key frame="90" value="-49.7491" />
                              <Key frame="102" value="-72.1615" />
                              <Key frame="115" value="-74.6225" />
                              <Key frame="127" value="-60.1203" />
                              <Key frame="140" value="-34.1044" />
                              <Key frame="152" value="-22.5906" />
                              <Key frame="165" value="-36.4775" />
                              <Key frame="177" value="-62.5813" />
                              <Key frame="190" value="-72.4252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-30.3251" />
                              <Key frame="27" value="-27.3367" />
                              <Key frame="40" value="-29.1825" />
                              <Key frame="52" value="-29.0067" />
                              <Key frame="65" value="-29.0946" />
                              <Key frame="77" value="-29.0946" />
                              <Key frame="90" value="-30.4129" />
                              <Key frame="102" value="-30.5887" />
                              <Key frame="115" value="-30.3251" />
                              <Key frame="127" value="-27.4246" />
                              <Key frame="140" value="-27.1609" />
                              <Key frame="152" value="-27.2488" />
                              <Key frame="165" value="-27.6883" />
                              <Key frame="177" value="-29.1825" />
                              <Key frame="190" value="-29.7977" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (6)" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="738" y="173">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="190">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.3805" />
                              <Key frame="27" value="-26.3651" />
                              <Key frame="40" value="-21.0916" />
                              <Key frame="52" value="-9.92936" />
                              <Key frame="65" value="-8.17153" />
                              <Key frame="77" value="-10.7204" />
                              <Key frame="90" value="-7.73207" />
                              <Key frame="102" value="-7.64417" />
                              <Key frame="115" value="-7.3805" />
                              <Key frame="127" value="-4.48007" />
                              <Key frame="140" value="-5.62267" />
                              <Key frame="152" value="-8.87466" />
                              <Key frame="165" value="-4.65585" />
                              <Key frame="177" value="-3.86484" />
                              <Key frame="190" value="-2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-45.0909" />
                              <Key frame="27" value="-57.5715" />
                              <Key frame="40" value="-53.2648" />
                              <Key frame="52" value="-51.1554" />
                              <Key frame="65" value="-58.6262" />
                              <Key frame="77" value="-61.2629" />
                              <Key frame="90" value="-60.9114" />
                              <Key frame="102" value="-55.9894" />
                              <Key frame="115" value="-45.0909" />
                              <Key frame="127" value="-46.6729" />
                              <Key frame="140" value="-60.9993" />
                              <Key frame="152" value="-62.5813" />
                              <Key frame="165" value="-62.6692" />
                              <Key frame="177" value="-57.9231" />
                              <Key frame="190" value="-38.0595" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.316" />
                              <Key frame="27" value="0.316" />
                              <Key frame="40" value="0.316" />
                              <Key frame="52" value="0.316" />
                              <Key frame="65" value="0.316" />
                              <Key frame="77" value="0.316" />
                              <Key frame="90" value="0.316" />
                              <Key frame="102" value="0.316" />
                              <Key frame="115" value="0.316" />
                              <Key frame="127" value="0.316" />
                              <Key frame="140" value="0.316" />
                              <Key frame="152" value="0.316" />
                              <Key frame="165" value="0.316" />
                              <Key frame="177" value="0.316" />
                              <Key frame="190" value="0.316" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="33.6601" />
                              <Key frame="27" value="41.8341" />
                              <Key frame="40" value="47.0197" />
                              <Key frame="52" value="64.8617" />
                              <Key frame="65" value="72.6841" />
                              <Key frame="77" value="58.094" />
                              <Key frame="90" value="29.1777" />
                              <Key frame="102" value="19.3338" />
                              <Key frame="115" value="33.6601" />
                              <Key frame="127" value="61.6097" />
                              <Key frame="140" value="79.9791" />
                              <Key frame="152" value="60.9066" />
                              <Key frame="165" value="29.3534" />
                              <Key frame="177" value="14.2361" />
                              <Key frame="190" value="23.2889" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="58.1819" />
                              <Key frame="27" value="58.9729" />
                              <Key frame="40" value="67.7621" />
                              <Key frame="52" value="58.6214" />
                              <Key frame="65" value="36.5606" />
                              <Key frame="77" value="24.6073" />
                              <Key frame="90" value="25.8378" />
                              <Key frame="102" value="37.5274" />
                              <Key frame="115" value="58.1819" />
                              <Key frame="127" value="56.1604" />
                              <Key frame="140" value="30.3202" />
                              <Key frame="152" value="17.9275" />
                              <Key frame="165" value="16.9607" />
                              <Key frame="177" value="29.9687" />
                              <Key frame="190" value="52.5568" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-28.743" />
                              <Key frame="27" value="-29.0946" />
                              <Key frame="40" value="-24.3484" />
                              <Key frame="52" value="-24.9637" />
                              <Key frame="65" value="-27.8641" />
                              <Key frame="77" value="-29.3582" />
                              <Key frame="90" value="-29.8856" />
                              <Key frame="102" value="-29.7098" />
                              <Key frame="115" value="-28.743" />
                              <Key frame="127" value="-30.5008" />
                              <Key frame="140" value="-31.8192" />
                              <Key frame="152" value="-33.7528" />
                              <Key frame="165" value="-34.5439" />
                              <Key frame="177" value="-34.1044" />
                              <Key frame="190" value="-32.9618" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="2" />
                              <Key frame="27" value="17.7565" />
                              <Key frame="40" value="6.06693" />
                              <Key frame="52" value="2" />
                              <Key frame="65" value="5.10013" />
                              <Key frame="77" value="4.13332" />
                              <Key frame="90" value="4.74855" />
                              <Key frame="102" value="3.25439" />
                              <Key frame="115" value="2" />
                              <Key frame="127" value="2" />
                              <Key frame="140" value="2.99072" />
                              <Key frame="152" value="3.69386" />
                              <Key frame="165" value="3.95753" />
                              <Key frame="177" value="5.18802" />
                              <Key frame="190" value="2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="65.4769" />
                              <Key frame="27" value="77.5181" />
                              <Key frame="40" value="77.3423" />
                              <Key frame="52" value="77.1665" />
                              <Key frame="65" value="76.9908" />
                              <Key frame="77" value="73.9145" />
                              <Key frame="90" value="70.9262" />
                              <Key frame="102" value="66.6195" />
                              <Key frame="115" value="65.4769" />
                              <Key frame="127" value="66.0043" />
                              <Key frame="140" value="68.1137" />
                              <Key frame="152" value="68.2016" />
                              <Key frame="165" value="67.6742" />
                              <Key frame="177" value="63.6312" />
                              <Key frame="190" value="58.8851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.2468" />
                              <Key frame="27" value="0.2464" />
                              <Key frame="40" value="0.2464" />
                              <Key frame="52" value="0.2464" />
                              <Key frame="65" value="0.2464" />
                              <Key frame="77" value="0.2468" />
                              <Key frame="90" value="0.2468" />
                              <Key frame="102" value="0.2464" />
                              <Key frame="115" value="0.2468" />
                              <Key frame="127" value="0.2468" />
                              <Key frame="140" value="0.2468" />
                              <Key frame="152" value="0.2464" />
                              <Key frame="165" value="0.2464" />
                              <Key frame="177" value="0.2464" />
                              <Key frame="190" value="0.2464" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="59.2414" />
                              <Key frame="27" value="92.904" />
                              <Key frame="40" value="96.3317" />
                              <Key frame="52" value="106.615" />
                              <Key frame="65" value="102.308" />
                              <Key frame="77" value="66.5365" />
                              <Key frame="90" value="52.2101" />
                              <Key frame="102" value="50.1886" />
                              <Key frame="115" value="59.2414" />
                              <Key frame="127" value="86.8394" />
                              <Key frame="140" value="97.2986" />
                              <Key frame="152" value="68.0306" />
                              <Key frame="165" value="44.9151" />
                              <Key frame="177" value="39.6416" />
                              <Key frame="190" value="48.9581" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-74.6225" />
                              <Key frame="27" value="-76" />
                              <Key frame="40" value="-75.6772" />
                              <Key frame="52" value="-60.5598" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="77" value="-31.7313" />
                              <Key frame="90" value="-49.7491" />
                              <Key frame="102" value="-72.1615" />
                              <Key frame="115" value="-74.6225" />
                              <Key frame="127" value="-60.1203" />
                              <Key frame="140" value="-34.1044" />
                              <Key frame="152" value="-22.5906" />
                              <Key frame="165" value="-36.4775" />
                              <Key frame="177" value="-62.5813" />
                              <Key frame="190" value="-72.4252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-30.3251" />
                              <Key frame="27" value="-27.3367" />
                              <Key frame="40" value="-29.1825" />
                              <Key frame="52" value="-29.0067" />
                              <Key frame="65" value="-29.0946" />
                              <Key frame="77" value="-29.0946" />
                              <Key frame="90" value="-30.4129" />
                              <Key frame="102" value="-30.5887" />
                              <Key frame="115" value="-30.3251" />
                              <Key frame="127" value="-27.4246" />
                              <Key frame="140" value="-27.1609" />
                              <Key frame="152" value="-27.2488" />
                              <Key frame="165" value="-27.6883" />
                              <Key frame="177" value="-29.1825" />
                              <Key frame="190" value="-29.7977" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Timeline (7)" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="887" y="173">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="190">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.3805" />
                              <Key frame="27" value="-26.3651" />
                              <Key frame="40" value="-21.0916" />
                              <Key frame="52" value="-9.92936" />
                              <Key frame="65" value="-8.17153" />
                              <Key frame="77" value="-10.7204" />
                              <Key frame="90" value="-7.73207" />
                              <Key frame="102" value="-7.64417" />
                              <Key frame="115" value="-7.3805" />
                              <Key frame="127" value="-4.48007" />
                              <Key frame="140" value="-5.62267" />
                              <Key frame="152" value="-8.87466" />
                              <Key frame="165" value="-4.65585" />
                              <Key frame="177" value="-3.86484" />
                              <Key frame="190" value="-2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-45.0909" />
                              <Key frame="27" value="-57.5715" />
                              <Key frame="40" value="-53.2648" />
                              <Key frame="52" value="-51.1554" />
                              <Key frame="65" value="-58.6262" />
                              <Key frame="77" value="-61.2629" />
                              <Key frame="90" value="-60.9114" />
                              <Key frame="102" value="-55.9894" />
                              <Key frame="115" value="-45.0909" />
                              <Key frame="127" value="-46.6729" />
                              <Key frame="140" value="-60.9993" />
                              <Key frame="152" value="-62.5813" />
                              <Key frame="165" value="-62.6692" />
                              <Key frame="177" value="-57.9231" />
                              <Key frame="190" value="-38.0595" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.316" />
                              <Key frame="27" value="0.316" />
                              <Key frame="40" value="0.316" />
                              <Key frame="52" value="0.316" />
                              <Key frame="65" value="0.316" />
                              <Key frame="77" value="0.316" />
                              <Key frame="90" value="0.316" />
                              <Key frame="102" value="0.316" />
                              <Key frame="115" value="0.316" />
                              <Key frame="127" value="0.316" />
                              <Key frame="140" value="0.316" />
                              <Key frame="152" value="0.316" />
                              <Key frame="165" value="0.316" />
                              <Key frame="177" value="0.316" />
                              <Key frame="190" value="0.316" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="33.6601" />
                              <Key frame="27" value="41.8341" />
                              <Key frame="40" value="47.0197" />
                              <Key frame="52" value="64.8617" />
                              <Key frame="65" value="72.6841" />
                              <Key frame="77" value="58.094" />
                              <Key frame="90" value="29.1777" />
                              <Key frame="102" value="19.3338" />
                              <Key frame="115" value="33.6601" />
                              <Key frame="127" value="61.6097" />
                              <Key frame="140" value="79.9791" />
                              <Key frame="152" value="60.9066" />
                              <Key frame="165" value="29.3534" />
                              <Key frame="177" value="14.2361" />
                              <Key frame="190" value="23.2889" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="58.1819" />
                              <Key frame="27" value="58.9729" />
                              <Key frame="40" value="67.7621" />
                              <Key frame="52" value="58.6214" />
                              <Key frame="65" value="36.5606" />
                              <Key frame="77" value="24.6073" />
                              <Key frame="90" value="25.8378" />
                              <Key frame="102" value="37.5274" />
                              <Key frame="115" value="58.1819" />
                              <Key frame="127" value="56.1604" />
                              <Key frame="140" value="30.3202" />
                              <Key frame="152" value="17.9275" />
                              <Key frame="165" value="16.9607" />
                              <Key frame="177" value="29.9687" />
                              <Key frame="190" value="52.5568" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-28.743" />
                              <Key frame="27" value="-29.0946" />
                              <Key frame="40" value="-24.3484" />
                              <Key frame="52" value="-24.9637" />
                              <Key frame="65" value="-27.8641" />
                              <Key frame="77" value="-29.3582" />
                              <Key frame="90" value="-29.8856" />
                              <Key frame="102" value="-29.7098" />
                              <Key frame="115" value="-28.743" />
                              <Key frame="127" value="-30.5008" />
                              <Key frame="140" value="-31.8192" />
                              <Key frame="152" value="-33.7528" />
                              <Key frame="165" value="-34.5439" />
                              <Key frame="177" value="-34.1044" />
                              <Key frame="190" value="-32.9618" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="2" />
                              <Key frame="27" value="17.7565" />
                              <Key frame="40" value="6.06693" />
                              <Key frame="52" value="2" />
                              <Key frame="65" value="5.10013" />
                              <Key frame="77" value="4.13332" />
                              <Key frame="90" value="4.74855" />
                              <Key frame="102" value="3.25439" />
                              <Key frame="115" value="2" />
                              <Key frame="127" value="2" />
                              <Key frame="140" value="2.99072" />
                              <Key frame="152" value="3.69386" />
                              <Key frame="165" value="3.95753" />
                              <Key frame="177" value="5.18802" />
                              <Key frame="190" value="2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="65.4769" />
                              <Key frame="27" value="77.5181" />
                              <Key frame="40" value="77.3423" />
                              <Key frame="52" value="77.1665" />
                              <Key frame="65" value="76.9908" />
                              <Key frame="77" value="73.9145" />
                              <Key frame="90" value="70.9262" />
                              <Key frame="102" value="66.6195" />
                              <Key frame="115" value="65.4769" />
                              <Key frame="127" value="66.0043" />
                              <Key frame="140" value="68.1137" />
                              <Key frame="152" value="68.2016" />
                              <Key frame="165" value="67.6742" />
                              <Key frame="177" value="63.6312" />
                              <Key frame="190" value="58.8851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.2468" />
                              <Key frame="27" value="0.2464" />
                              <Key frame="40" value="0.2464" />
                              <Key frame="52" value="0.2464" />
                              <Key frame="65" value="0.2464" />
                              <Key frame="77" value="0.2468" />
                              <Key frame="90" value="0.2468" />
                              <Key frame="102" value="0.2464" />
                              <Key frame="115" value="0.2468" />
                              <Key frame="127" value="0.2468" />
                              <Key frame="140" value="0.2468" />
                              <Key frame="152" value="0.2464" />
                              <Key frame="165" value="0.2464" />
                              <Key frame="177" value="0.2464" />
                              <Key frame="190" value="0.2464" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="59.2414" />
                              <Key frame="27" value="92.904" />
                              <Key frame="40" value="96.3317" />
                              <Key frame="52" value="106.615" />
                              <Key frame="65" value="102.308" />
                              <Key frame="77" value="66.5365" />
                              <Key frame="90" value="52.2101" />
                              <Key frame="102" value="50.1886" />
                              <Key frame="115" value="59.2414" />
                              <Key frame="127" value="86.8394" />
                              <Key frame="140" value="97.2986" />
                              <Key frame="152" value="68.0306" />
                              <Key frame="165" value="44.9151" />
                              <Key frame="177" value="39.6416" />
                              <Key frame="190" value="48.9581" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-74.6225" />
                              <Key frame="27" value="-76" />
                              <Key frame="40" value="-75.6772" />
                              <Key frame="52" value="-60.5598" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="77" value="-31.7313" />
                              <Key frame="90" value="-49.7491" />
                              <Key frame="102" value="-72.1615" />
                              <Key frame="115" value="-74.6225" />
                              <Key frame="127" value="-60.1203" />
                              <Key frame="140" value="-34.1044" />
                              <Key frame="152" value="-22.5906" />
                              <Key frame="165" value="-36.4775" />
                              <Key frame="177" value="-62.5813" />
                              <Key frame="190" value="-72.4252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-30.3251" />
                              <Key frame="27" value="-27.3367" />
                              <Key frame="40" value="-29.1825" />
                              <Key frame="52" value="-29.0067" />
                              <Key frame="65" value="-29.0946" />
                              <Key frame="77" value="-29.0946" />
                              <Key frame="90" value="-30.4129" />
                              <Key frame="102" value="-30.5887" />
                              <Key frame="115" value="-30.3251" />
                              <Key frame="127" value="-27.4246" />
                              <Key frame="140" value="-27.1609" />
                              <Key frame="152" value="-27.2488" />
                              <Key frame="165" value="-27.6883" />
                              <Key frame="177" value="-29.1825" />
                              <Key frame="190" value="-29.7977" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Link inputowner="20" indexofinput="2" outputowner="6" indexofoutput="3" />
                      <Link inputowner="25" indexofinput="2" outputowner="21" indexofoutput="4" />
                      <Link inputowner="26" indexofinput="2" outputowner="25" indexofoutput="4" />
                      <Link inputowner="27" indexofinput="2" outputowner="26" indexofoutput="4" />
                      <Link inputowner="28" indexofinput="2" outputowner="27" indexofoutput="4" />
                      <Link inputowner="23" indexofinput="2" outputowner="24" indexofoutput="4" />
                      <Link inputowner="29" indexofinput="2" outputowner="28" indexofoutput="4" />
                      <Link inputowner="30" indexofinput="2" outputowner="29" indexofoutput="4" />
                      <Link inputowner="31" indexofinput="2" outputowner="30" indexofoutput="3" />
                      <Link inputowner="24" indexofinput="2" outputowner="34" indexofoutput="3" />
                      <Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="23" indexofoutput="4" />
                      <Link inputowner="29" indexofinput="2" outputowner="20" indexofoutput="4" />
                      <Link inputowner="52" indexofinput="2" outputowner="31" indexofoutput="4" />
                      <Link inputowner="11" indexofinput="2" outputowner="52" indexofoutput="4" />
                      <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                      <Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="4" />
                      <Link inputowner="14" indexofinput="2" outputowner="13" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="23" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="34" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Link inputowner="2" indexofinput="2" outputowner="53" indexofoutput="3" />
            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
            <Link inputowner="17" indexofinput="2" outputowner="3" indexofoutput="3" />
            <Link inputowner="1" indexofinput="2" outputowner="17" indexofoutput="3" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" />
            <Link inputowner="53" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
